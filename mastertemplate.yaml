AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Master Template to set up the Service Catalogue, User Groups and Permisions for the Automation Logic Cloud Platform.
Parameters:
  Cleanup:
    AllowedValues:
      - Enable
      - Disable
    Default: Enable
    Description: Enable cleanup lambda to cleanup a product stack's resources. Do not Enable in Production
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Debug Mode'
        Parameters:
          - Cleanup
    ParameterLabels:
      Cleanup:
        default: Auto Cleanup

Conditions:
  cEnableCleanup: !Equals [!Ref Cleanup, 'Enable']

Resources:
  CloudPlatformRepo:
    Type: AWS::CodeCommit::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryDescription: Service Catalog code and the Cloud Formation templates for the Automation Logic Cloud Platform.
      RepositoryName: !Sub '${AWS::StackName}-Repo'
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-artifacts'
  CodeBuildRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactBucket
    Properties:
      RoleName: !Sub ${AWS::StackName}-CodeBuildRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-CodeBuildPolicy'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-CodeBuildLambda:log-stream'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-CodeBuildLambda:log-stream:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-products:log-stream'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-products:log-stream:*'
  CodeBuildLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${AWS::StackName}-CodeBuildLambda'
      RetentionInDays: 30
  CodeBuildLambda:
    Type: AWS::CodeBuild::Project
    DependsOn: [CloudPlatformRepo, CodeBuildRole, CodeBuildLambdaLogGroup]
    Properties:
      Name: !Sub '${AWS::StackName}-CodeBuildLambda'
      Description: !Sub '${AWS::StackName}-CodeBuildLambda'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:2.7.12
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref ArtifactBucket
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - cd servicecatalogue/lambda/
                - pip install -r requirements.txt -t "$PWD"
            build:
              commands:
                - aws cloudformation package --template-file lambda-cloudformation.yaml --s3-bucket "${S3_BUCKET}" --s3-prefix catalog-sync-lambda/codebuild --output-template-file lambdatemplate.yaml
          artifacts:
            files: servicecatalogue/lambda/lambdatemplate.yaml
            discard-paths: yes
      TimeoutInMinutes: 10
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'
  CFDeployerRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactBucket
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-cfdeployer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-cfdeployer-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:InvokeFunction
                  - lambda:RemovePermission
                  - lambda:UpdateFunctionCode
                  - lambda:GetFunctionConfiguration
                  - lambda:GetFunction
                  - lambda:UpdateFunctionConfiguration
                  - iam:CreateRole
                  - iam:CreatePolicy
                  - iam:GetRole
                  - iam:DeleteRole
                  - iam:PutRolePolicy
                  - iam:PassRole
                  - iam:DeleteRolePolicy
                  - cloudformation:*
                  - logs:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
  CodePipeLineRole:
    Type: AWS::IAM::Role
    DependsOn: ArtifactBucket
    Properties:
      RoleName: !Sub '${AWS::StackName}-${AWS::Region}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:*
                  - iam:ListRoles
                  - cloudformation:*
                  - codecommit:List*
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codecommit:UploadArchive
                  - codecommit:CancelUploadArchive
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - iam:PassRole
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                  - lambda:GetFunctionConfiguration
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}/*'
                  - !Sub 'arn:aws:s3:::${ArtifactBucket}'
          PolicyName: !Sub '${AWS::StackName}-${AWS::Region}-policy'
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: [CodePipeLineRole, CodeBuildLambda, CFDeployerRole]
    Properties:
      RoleArn: !GetAtt CodePipeLineRole.Arn
      Name: !Ref AWS::StackName
      Stages:
        - Name: source-code-checkout
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: !GetAtt CloudPlatformRepo.Name
                BranchName: master
              OutputArtifacts:
                - Name: SCCheckoutArtifact
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: build-lambda-function
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildLambda
              RunOrder: 1
              InputArtifacts:
                - Name: SCCheckoutArtifact
              OutputArtifacts:
                - Name: BuildLambdaOutput
        - Name: Deploy
          Actions:
            - Name: deploy-lambda-function
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                StackName: !Sub '${AWS::StackName}-sync-lambda'
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: BuildLambdaOutput::lambdatemplate.yaml
                RoleArn: !GetAtt CFDeployerRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "ParamsPrefix": "${AWS::StackName}"
                  }
              InputArtifacts:
                - Name: BuildLambdaOutput
              RunOrder: 1
        - Name: Invoke
          Actions:
            - Name: call-function
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Sub '${AWS::StackName}-SC-SyncLambda'
              InputArtifacts:
                - Name: SCCheckoutArtifact
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
  ######################################
  # Cleanup Section
  ######################################
  CleanupLambdaLogsGroup:
    Type: AWS::Logs::LogGroup
    Condition: cEnableCleanup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-AutoCleanup'
      RetentionInDays: 1
  CleanupLambdaRole:
    Type: AWS::IAM::Role
    Condition: cEnableCleanup
    Properties:
      RoleName: !Sub '${AWS::StackName}-AutoCleanupRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              # Provide Delete Permisions for Logs and S3
              - Effect: Allow
                Action:
                  - logs:Delete*
                  - s3:Delete*
                  - s3:List*
                  - cloudformation:Delete*
                  - ecr:Delete*
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub ${CloudFormationCleanupRole.Arn}
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-AutoCleanup'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-AutoCleanup:*'
  CloudFormationCleanupRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-CloudFormationCleanupRole'
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecs:Delete*
                  - ecs:DeregisterTask*
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecr:Delete*
                  - iam:Delete*
                  - application-autoscaling:*
                  - cloudwatch:Delete*
  CleanupLambda:
    Type: AWS::Lambda::Function
    Condition: cEnableCleanup
    Properties:
      FunctionName: !Sub '${AWS::StackName}-AutoCleanup'
      Handler: index.handler
      Role: !GetAtt 'CleanupLambdaRole.Arn'
      Environment:
        Variables:
          CF_CLEANUP_ROLE_ARN: !Sub '${CloudFormationCleanupRole.Arn}'
      Code:
        # Lambda to Auto Cleanup Stack's Resources.
        # Ref: lambda/CleanupLambda.js
        ZipFile: |
          var AWS = require('aws-sdk');
          var response = require('cfn-response');
          exports.handler = function (event, context) {
          try {
          var s3 = new AWS.S3();
          var cloudwatchlogs = new AWS.CloudWatchLogs();
          var ecr = new AWS.ECR();
          var cloudformation = new AWS.CloudFormation();
          console.log('event ',JSON.stringify(event));
          if(event.RequestType == 'Delete') {

          var bNames = event.ResourceProperties.BucketNames ? event.ResourceProperties.BucketNames : [];
          var lgNames = event.ResourceProperties.LogGroupNames ? event.ResourceProperties.LogGroupNames : [];
          var ecrNames = event.ResourceProperties.ECRNames ? event.ResourceProperties.ECRNames : [];
          var stackNames = event.ResourceProperties.StackNames ? event.ResourceProperties.StackNames : [];

          var promiseCollection = [];
          if(bNames.length > 0){
          bNames.forEach(function(bName) {
          promiseCollection.push(new Promise(function(resolve, reject) {
          deleteBucket(bName,function() {
          console.log('Del Bucket completed ' + bName);
          resolve();
          });
          }));
          });
          }
          if(lgNames.length > 0){
          lgNames.forEach(function(lgName) {
          promiseCollection.push(new Promise(function(resolve, reject) {
          deleteLogGroup(lgName,function() {
          console.log('Del Logs completed ' + lgName);
          resolve();
          });
          }));
          });
          }
          if(ecrNames.length > 0){
          ecrNames.forEach(function(ecrName) {
          promiseCollection.push(new Promise(function(resolve, reject) {
          deleteECR(ecrName,function() {
          console.log('Del ECR completed ' + ecrName);
          resolve();
          });
          }));
          });
          }
          if(stackNames.length > 0){
          stackNames.forEach(function(stackName) {
          promiseCollection.push(new Promise(function(resolve, reject) {
          deleteStack(stackName,function() {
          console.log('Del Stack completed ' + stackName);
          resolve();
          });
          }));
          });
          }
          console.log(JSON.stringify(promiseCollection));
          Promise.all(promiseCollection)
          .then(function() {
          console.log("All Operations Completed.");
          response.send(event, context, response.SUCCESS);
          })
          .catch(console.error);

          }
          else{
          response.send(event, context, response.SUCCESS);
          }

          function deleteBucket(bName, callback){
          var params = {
          Bucket: bName
          };

          emptyBucket(bName, function(bool){
          if(bool==true){
          s3.deleteBucket(params, function(err, data) {
          if (err) console.log('Delete Bucket Failed: ',bName,'Error: ', err, err.stack);
          else console.log('Bucket Deleted: ', bName);
          callback();
          });
          }
          else{
          console.log('cannot delete bucket',bName);
          callback();
          }
          });
          }

          function emptyBucket(bName,callback){
          var params = {
          Bucket: bName
          };

          s3.listObjectsV2(params, function(err, data) {
          if (err){
          console.log('Error Listing Objects in Bucket ',bName,' Error: ',err);
          return callback(false);
          }
          if (data.Contents.length == 0) {
          console.log('Empty Bucket ',bName);
          callback(true);
          }
          params = {Bucket: bName};
          params.Delete = {Objects:[]};
          data.Contents.forEach(function(content) {
          params.Delete.Objects.push({Key: content.Key});
          });
          s3.deleteObjects(params, function(err, deldata) {
          if (err){
          console.log('Error Deleting Objects in Bucket ',bName,' Error: ',err);
          return callback(false);
          }
          if(deldata.Deleted.length == 1000)
          emptyBucket(bName,callback);
          else callback(true);
          });
          });
          }

          function deleteLogGroup(lgName, callback){
          var params = {
          logGroupName: lgName
          };
          cloudwatchlogs.deleteLogGroup(params, function(err, data) {
          if (err) console.log('Delete Logs Failed: ',lgName,'Error: ', err, err.stack);
          else console.log('Logs Deleted: ', lgName);
          callback();
          });
          }

          function deleteECR(ecrName, callback){
          var params = {
          force: true,
          repositoryName: ecrName
          };
          ecr.deleteRepository(params, function(err, data) {
          if (err) console.log('Delete ECR Failed: ',ecrName,'Error: ', err, err.stack);
          else console.log('ECR Deleted: ', ecrName);
          callback();
          });
          }

          function deleteStack(stackName, callback){
          var params = {
          StackName: stackName,
          RoleARN: process.env.CF_CLEANUP_ROLE_ARN
          };
          cloudformation.deleteStack(params, function(err, data) {
          if (err) console.log('Delete Stack Failed: ',stackName,'Error: ', err, err.stack);
          else console.log('Stack Deleted: ', stackName);
          callback();
          });
          }
          }
          catch (err) {
          console.log('General Error.');
          console.log(err);
          response.send(event, context, response.SUCCESS);
          }
          };
      Runtime: nodejs6.10
      Timeout: 120

Outputs:
  ArtifactBucket:
    Description: ArtifactBucket to be Used
    Value: !Ref ArtifactBucket
  RepoURL:
    Description: CodeCommit Repository SSH URL to push Service Catalog Related Artifacts
    Value: !GetAtt CloudPlatformRepo.CloneUrlSsh
  CleanupLambdaArn:
    Description: Arn of the Cleanup Lambda function
    Condition: cEnableCleanup
    Value: !GetAtt 'CleanupLambda.Arn'
    Export:
      Name: 'CleanupLambdaArn'
