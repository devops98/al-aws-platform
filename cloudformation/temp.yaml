AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Automation Logic Cloud Platform
Mappings:
  AWSRegion2AMI:
    # ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20170113
    us-east-1:
      Ubuntu16x04: ami-6edd3078
    us-east-2:
      Ubuntu16x04: ami-fcc19b99
    us-west-2:
      Ubuntu16x04: ami-7c803d1c
    eu-west-1:
      Ubuntu16x04: ami-405f7226
    eu-central-1:
      Ubuntu16x04: ami-5aee2235
    ap-southeast-1:
      Ubuntu16x04: ami-b1943fd2
    ap-southeast-2:
      Ubuntu16x04: ami-fe71759d
    ap-northeast-1:
      Ubuntu16x04: ami-eb49358c
  AWSRegionECSAMI:
    # amzn-ami-2016.09.f-amazon-ecs-optimized
    us-east-1:
      ecs: ami-b2df2ca4
    us-east-2:
      ecs: ami-832b0ee6
    us-west-2:
      ecs: ami-022b9262
    eu-west-1:
      ecs: ami-a7f2acc1
    eu-central-1:
      ecs: ami-ec2be583
    ap-southeast-1:
      ecs: ami-a88530cb
    ap-southeast-2:
      ecs: ami-8af8ffe9
    ap-northeast-1:
      ecs: ami-c393d6a4


Parameters:
  UseContainers:
    Description: Use Docker Containers
    Type: String
    Default: Disabled
    AllowedValues:
      - Enabled
      - Disabled
  InstanceType:
    AllowedValues:
      - t2.micro
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: c4.large
    Description: WebServer EC2 instance type
    Type: String
  InstanceCount:
    Description: Number of Amazon EC2 instances to Launch. (Must be a number between
      1 and 4).
    Type: Number
    Default: 2
    ConstraintDescription: Must be a number between 1 and 4.
    MinValue: 1
    MaxValue: 4
  InstanceMaxCount:
    Description: Maximum Number of Amazon EC2 instances in an autoscaling group. (Must
      be a number between 4 and 8)
    Type: Number
    Default: 4
    ConstraintDescription: Must be a number between 4 and 8.
    MinValue: 4
    MaxValue: 8
  InstanceMinCount:
    Description: Minimum Number of Amazon EC2 instances in an autoscaling group. (Must
      be a number between 1 and 4).
    Type: Number
    Default: 2
    ConstraintDescription: Must be a number between 1 and 4.
    MinValue: 1
    MaxValue: 4
  SSHLocation:
    Description: The IP address range that can be used to connect using SSH or RDP
      to the Amazon EC2 instances.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
  OperatingSystem:
    AllowedValues:
      - Ubuntu16x04
    Default: Ubuntu16x04
    Description: Operating System Type
    Type: String
  UseSpotInstances:
    Description: Enable/Disable Spot Instances to lower pricing. Warning t2.micro Instance Type does not work with spot instances. Frankfurt, Singapore, Sydney and Tokio regions currently does not support spot instances.
    AllowedValues:
      - Enable
      - Disable
    Default: Enable
    Type: String
  SpotPricing:
    Description: Price to bid on Spot Instances.
    Type: Number
    Default: 0.05
    ConstraintDescription: Must be a Positive Number between 0 and 1
    MinValue: 0
    MaxValue: 1
  KeyPairName:
    ConstraintDescription: can contain only ASCII characters.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  UseDNS:
    Description: Enable/Disable DNS configurations
    AllowedValues:
      - Enable
      - Disable
    Default: Enable
    Type: String
Conditions:
  cEnableDNS: !Equals [!Ref UseDNS, 'Enable']
  cSpotPriceGreaterThanZero: !Not [!Equals [!Ref SpotPricing, 0]]
  cEnableSpotInstances: !And
    - !Equals [!Ref UseSpotInstances, 'Enable']
    - !Condition cSpotPriceGreaterThanZero
    - !Not [!Equals [!Sub '${AWS::Region}', 'eu-central-1']]
    - !Not [!Equals [!Sub '${AWS::Region}', 'ap-southeast-1']]
    - !Not [!Equals [!Sub '${AWS::Region}', 'ap-southeast-2']]
    - !Not [!Equals [!Sub '${AWS::Region}', 'ap-northeast-1']]
  cEnableContainers: !Equals [!Ref UseContainers, 'Enabled']

# Resources documentation
# http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.250.0.0/16'
      InstanceTenancy: 'default'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  publicSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.250.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet01'
  publicSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.250.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: True
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet02'
  privateSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.250.100.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet01'
  privateSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref myVPC
      CidrBlock: 10.250.101.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet02'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: [myVPC]
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetGateway'
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway
  InternetPublicRoutingTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachInternetGateway
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InternetRoutingTable'
  InternetPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InternetPublicRoutingTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet01
      RouteTableId: !Ref InternetPublicRoutingTable
  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet02
      RouteTableId: !Ref InternetPublicRoutingTable

  ####################################################################################
  # Start of Set Parameter Function
  ####################################################################################
  MyKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Master key used by Parameter Store
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: '*'
            Resource: '*'
          # Allow EncryptLambda function to use the key
          - Effect: Allow
            Action:
              - kms:Encrypt
            Principal:
              AWS: !GetAtt 'LambdaRole.Arn'
            Resource: '*'
          # TODO: This can be set in the key! but we don't have it here
          - Effect: Allow
            Action:
              - kms:Decrypt
            Principal:
              AWS:
                - !GetAtt 'EC2InstanceRole.Arn'
                # - !If
                #   - cEnableContainers
                #   - !GetAtt 'TaskRole.Arn'
                #   - !Ref 'AWS::NoValue'
            Resource: '*'
  MyKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub 'alias/${AWS::StackName}-masterkey'
      TargetKeyId: !Ref MyKey

  # Create Log Group to setup the Retention time of Lambda Logs
  EncryptLambdaLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-set-param-store'
      RetentionInDays: 1
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-Lambda-SetParamStore'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              # Allow lambda to create log group
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'
              # Create Log streams and write on it
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-set-param-store'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-set-param-store:*'
              # Allow Lambda Function to set values into Parameters Store in a specific name space
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.db.*'
                  # Used on AWS console to test the function ^.^
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.fn.test'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.slack.*'
  EncryptLambda:
    Type: AWS::Lambda::Function
    DependsOn: MyKeyAlias
    Properties:
      FunctionName: !Sub '${AWS::StackName}-set-param-store'
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaRole.Arn'
      Code:
        ZipFile: |
          import base64
          import uuid
          import httplib
          import urlparse
          import json
          import boto3
          import logging
          import cfnresponse

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
            logger.info('got event{}'.format(event))
            logger.info('got context{}'.format(context))

            response = {
              'StackId': event['StackId'],
              'RequestId': event['RequestId'],
              'LogicalResourceId': event['LogicalResourceId'],
              'Status': 'SUCCESS'
            }
            status = cfnresponse.SUCCESS
            data = {}

            #Delete action is a NoOp
            if event['RequestType'] == 'Delete':
              data['message'] = 'Delete Event. Nothing to do!'
              cfnresponse.send(event, context, status, data)
              return

            # WIP
            if event['RequestType'] == 'Update':
              data['message'] = 'Update Event. Nothing to do!'
              cfnresponse.send(event, context, status, data)
              return

            try:
              ResourceProperties = event['ResourceProperties']

              # Save value into parameter store
              psClient = boto3.client('ssm')
              a = {
                'Name': ResourceProperties['ParameterStoreName'],
                'Value': ResourceProperties['Value'],
                'Type': ResourceProperties['Type'],
                'Overwrite': bool(ResourceProperties['Overwrite']) if 'Overwrite' in ResourceProperties else False,
              }

              if 'Description' in ResourceProperties:
                a['Description'] = ResourceProperties['Description']

              if 'KeyId' in ResourceProperties:
                a['KeyId'] =  ResourceProperties['KeyId']

              psClient.put_parameter(**a)

              data['message'] = 'The value was successfully encrypted'
            except Exception as e:
              logger.error(e)
              status = cfnresponse.FAILED
              data['message'] = 'Encryption Failed - See CloudWatch logs for the Lamba function backing the custom resource for details'

            cfnresponse.send(event, context, status, data)
      Runtime: python2.7
      Timeout: 25
  StoreEncryptedDBPassword:
    Type: Custom::SetParameterStore
    Properties:
      ServiceToken: !GetAtt 'EncryptLambda.Arn'
      KeyId: !Sub 'alias/${AWS::StackName}-masterkey'
      ParameterStoreName: !Sub '${AWS::StackName}.db.password'
      Value: 'Password123'
      Description: DataBase password
      Type: 'SecureString'
      Overwrite: true
  ####################################################################################
  # End of Set Parameter Function
  ####################################################################################

  # #####################################################################################
  # # Start of ECS
  # #####################################################################################
  # ContainerCluster:
  #   Type: AWS::ECS::Cluster
  #   Condition: cEnableContainers
  #   Properties:
  #     ClusterName: !Sub '${AWS::StackName}-cluster'
  # # complete example http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ecs.html
  # ECSAutoScalingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Condition: cEnableContainers
  #   Properties:
  #     VPCZoneIdentifier:
  #       - !Ref publicSubnet01
  #       - !Ref publicSubnet02
  #     LaunchConfigurationName: !Ref ECSLaunchConfig
  #     MinSize: !Ref 'InstanceMinCount'
  #     MaxSize: !Ref 'InstanceMaxCount'
  #     DesiredCapacity: !Ref 'InstanceCount'
  #     MetricsCollection:
  #       # No metrics specified, send all!
  #       # http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_EnableMetricsCollection.html
  #       - Granularity: 1Minute
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-ECS'
  #         PropagateAtLaunch: true
  #   CreationPolicy:
  #     ResourceSignal:
  #       Timeout: PT15M
  #   UpdatePolicy:
  #     AutoScalingReplacingUpdate:
  #       WillReplace: true

  # # 'Fn::Transform':
  # #   Name: 'AWS::Include'
  # #   Condition: cEnableContainers
  # #   Parameters:
  # #     Location : "s3://al-cf-templates-eu-west-1/ecs.yaml"

  # ECSSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Condition: cEnableContainers
  #   Properties:
  #     GroupDescription: ECS Security Group
  #     VpcId: !Ref myVPC
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         IpProtocol: tcp
  #         FromPort: 31000
  #         ToPort: 61000
  #       - CidrIp: !Ref 'SSHLocation'
  #         IpProtocol: tcp
  #         FromPort: 22
  #         ToPort: 22
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-ECS'
  # ECSALBSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Condition: cEnableContainers
  #   Properties:
  #     GroupDescription: ECS LB Security Group
  #     VpcId: !Ref myVPC
  #     SecurityGroupIngress:
  #       - CidrIp: 0.0.0.0/0
  #         IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #       - CidrIp: 0.0.0.0/0
  #         IpProtocol: tcp
  #         FromPort: 443
  #         ToPort: 443
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${AWS::StackName}-ECS-LB'
  # ECSInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Condition: cEnableContainers
  #   Properties:
  #     Path: /
  #     Roles: [!Ref ECSInstanceRole]
  # ECSInstanceRole:
  #   Type: AWS::IAM::Role
  #   Condition: cEnableContainers
  #   Properties:
  #     RoleName: !Sub '${AWS::StackName}-ECSInstanceRole'
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: [ec2.amazonaws.com]
  #           Action: ['sts:AssumeRole']
  #     Path: /
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - 'ecs:CreateCluster'
  #                 - 'ecs:DeregisterContainerInstance'
  #                 - 'ecs:DiscoverPollEndpoint'
  #                 - 'ecs:Poll'
  #                 - 'ecs:RegisterContainerInstance'
  #                 - 'ecs:StartTelemetrySession'
  #                 - 'ecs:Submit*'
  #                 - 'logs:CreateLogGroup'
  #                 - 'logs:CreateLogStream'
  #                 - 'logs:PutLogEvents'
  #               Resource: '*'
  #             - Effect: Allow
  #               Action:
  #                 - ecr:GetAuthorizationToken
  #                 - ecr:BatchCheckLayerAvailability
  #                 - ecr:GetDownloadUrlForLayer
  #                 - ecr:GetRepositoryPolicy
  #                 - ecr:DescribeRepositories
  #                 - ecr:ListImages
  #                 - ecr:DescribeImages
  #                 - ecr:BatchGetImage
  #               Resource: '*'
  # ECSServiceRole:
  #   Type: AWS::IAM::Role
  #   Condition: cEnableContainers
  #   Properties:
  #     RoleName: !Sub '${AWS::StackName}-ECS-Service'
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: [ecs.amazonaws.com]
  #           Action: ['sts:AssumeRole']
  #     Path: /
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
  #                 - 'elasticloadbalancing:DeregisterTargets'
  #                 - 'elasticloadbalancing:Describe*'
  #                 - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
  #                 - 'elasticloadbalancing:RegisterTargets'
  #                 - 'ec2:Describe*'
  #                 - 'ec2:AuthorizeSecurityGroupIngress'
  #               Resource: '*'
  # ECSALB:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Condition: cEnableContainers
  #   Properties:
  #     Name: !Sub '${AWS::StackName}-ECS-LB'
  #     Scheme: internet-facing
  #     LoadBalancerAttributes:
  #       - Key: idle_timeout.timeout_seconds
  #         Value: 30
  #     Subnets:
  #       - !Ref publicSubnet01
  #       - !Ref publicSubnet02
  #     SecurityGroups: [!Ref ECSALBSecurityGroup]
  # ECSTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Condition: cEnableContainers
  #   Properties:
  #     HealthCheckPath: /
  #     Name: !Sub '${AWS::StackName}-ECSTargetGroup'
  #     Port: 3000
  #     Protocol: HTTP
  #     VpcId: !Ref myVPC
  # ALBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Condition: cEnableContainers
  #   Properties:
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref ECSTargetGroup
  #     LoadBalancerArn: !Ref ECSALB
  #     Port: 80
  #     Protocol: HTTP
  # MyRepository:
  #   Type: AWS::ECR::Repository
  #   Condition: cEnableContainers
  #   Properties:
  #     RepositoryName: !Sub '${AWS::StackName}-containerimage'
  #     RepositoryPolicyText:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Sid: AllowPushPull
  #           Effect: Allow
  #           Principal:
  #             AWS:
  #               - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
  #           Action:
  #             - ecr:GetDownloadUrlForLayer
  #             - ecr:BatchGetImage
  #             - ecr:BatchCheckLayerAvailability
  #             - ecr:PutImage
  #             - ecr:InitiateLayerUpload
  #             - ecr:UploadLayerPart
  #             - ecr:CompleteLayerUpload
  # # Create Log Group to setup the retention time of ECS task logs
  # TaskRole:
  #   Type: AWS::IAM::Role
  #   Condition: cEnableContainers
  #   Properties:
  #     RoleName: !Sub '${AWS::StackName}-ecs-task-role'
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Sid: '1'
  #           Effect: Allow
  #           Principal:
  #             Service: [ecs-tasks.amazonaws.com]
  #           Action: ['sts:AssumeRole']
  #     Policies:
  #       # Allow describe parameters to automate config process
  #       - PolicyName: parameter-store-list
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ssm:DescribeParameters
  #               Resource:
  #                 - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'
  #       - PolicyName: parameter-store-db
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ssm:GetParameters
  #               Resource:
  #                 - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.db.*'
  #       - PolicyName: parameter-store-app
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - ssm:GetParameters
  #                 - ssm:PutParameter
  #               Resource:
  #                 - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.app.*'
  # #####################################################################################
  # # End of ECS
  # #####################################################################################

  #####################################################################################
  # Start of EC2 Auto Scaling
  #####################################################################################
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access.
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref 'SSHLocation'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2'
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-EC2-InstanceRole'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:*
                  - codedeploy:*
                  - autoscaling:Describe*
                  - cloudformation:Describe*
                  - cloudformation:GetTemplate
                  - s3:Get*
                  - codepipeline:*
                  - rds:DescribeDBInstances
                Resource: '*'
              # Allow fetch from Parameters Store in a specific name space
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.db.*'
              # Allow describe parameters to automate config process
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*'
      Path: /
  EC2InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref EC2InstanceRole]
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref publicSubnet01
        - !Ref publicSubnet02
      LaunchConfigurationName: !Ref EC2LaunchConfig
      MinSize: !Ref 'InstanceMinCount'
      MaxSize: !Ref 'InstanceMaxCount'
      DesiredCapacity: !Ref 'InstanceCount'
      TargetGroupARNs: [!Ref EC2TG]
      MetricsCollection:
        # No metrics specified, send all!
        # http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_EnableMetricsCollection.html
        - Granularity: 1Minute
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  'Fn::Transform':
    Name: 'AWS::Include'
    Condition: !Not cEnableContainers
    Parameters:
      Location : "s3://al-cf-templates-eu-west-1/ec2.yaml"
  EC2ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CodeDeploy LB Security Group
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-EC2-LB'
  EC2ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-EC2-LB'
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref publicSubnet01
        - !Ref publicSubnet02
      SecurityGroups: [!Ref EC2ALBSecurityGroup]
  EC2TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-EC2TG'
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref myVPC
  EC2ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TG
      LoadBalancerArn: !Ref EC2ALB
      Port: 80
      Protocol: HTTP
  #####################################################################################
  # End of EC2 Auto Scaling
  #####################################################################################

  #####################################################################################
  # Start of CI/CD
  #####################################################################################
  CodeRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-repo'
      RepositoryDescription: A code repo for the application
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodeBuild'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: root
          PolicyDocument:
            Statement:
              # Login to ECR
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              # Publish to ECR
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Resource:
                  # TODO: paramenterize pm=test => ImageName
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-containerimage'
              # Pull repo
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                Resource:
                  # TODO: paramenterize pm=test => RepositoryName
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-repo'
              # Write build logs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  # TODO: paramenterize pm=test => ProjectName
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-build:log-stream'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-build:log-stream:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-test:log-stream'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-test:log-stream:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-integration-test:log-stream'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-integration-test:log-stream:*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-ecs-image:log-stream'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-ecs-image:log-stream:*'
  CodeBuildArtifact:
    Type: AWS::CodeBuild::Project
    DependsOn: [CodeRepo, CodeBuildRole]
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      Description: A description about my project
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        # Info: http://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker.html
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # List of Bukd Environments
        # http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html
        Image: aws/codebuild/nodejs:7.0.0
      Source:
        Location: !GetAtt 'CodeRepo.CloneUrlHttp'
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1
          phases:
            build:
              commands:
                - echo Install NodeJS dependencies...
                - npm install --only=prod
          artifacts:
            files:
              - '**/*' # All files recursively
      TimeoutInMinutes: 300  # 5min
  CodePipelineTestArtifact:
    Type: AWS::CodeBuild::Project
    DependsOn: [CodeRepo, CodeBuildRole]
    Properties:
      Name: !Sub '${AWS::StackName}-test'
      Description: A description about my project
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        # Info: http://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker.html
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # List of Bukd Environments
        # http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html
        Image: aws/codebuild/nodejs:7.0.0
      Source:
        Location: !GetAtt 'CodeRepo.CloneUrlHttp'
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.1
          phases:
            build:
              commands:
                - echo Install NodeJS dev/test dependencies...
                - npm install --only=dev
                - npm test
      TimeoutInMinutes: 300 # 5min
  # IntegrationTestAartifact:
  #   Type: AWS::CodeBuild::Project
  #   Condition: cEnableContainers
  #   DependsOn: [CodeRepo, CodeBuildRole]
  #   Properties:
  #     Name: !Sub '${AWS::StackName}-integration-test'
  #     Description: A description about my project
  #     ServiceRole: !GetAtt 'CodeBuildRole.Arn'
  #     Artifacts:
  #       Type: CODEPIPELINE
  #     Environment:
  #       # Info: http://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker.html
  #       Type: LINUX_CONTAINER
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       # List of Bukd Environments
  #       # http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html
  #       Image: aws/codebuild/nodejs:7.0.0
  #       EnvironmentVariables:
  #         - Name: API_URL
  #           Value: !Sub 'http://${ECSALB.DNSName}/api'
  #         - Name: DB_PASSWORD
  #           Value: 'Password123'
  #     Source:
  #       Location: !GetAtt 'CodeRepo.CloneUrlHttp'
  #       Type: CODEPIPELINE
  #       BuildSpec: !Sub |
  #         version: 0.1
  #         phases:
  #           build:
  #             commands:
  #               - echo integration tests...
  #               - npm install --only=dev
  #               - npm run integration-tests
  #     TimeoutInMinutes: 300 # 5min
  CodeBuildDockerImage:
    Type: AWS::CodeBuild::Project
    Condition: cEnableContainers
    DependsOn: [CodeRepo, CodeBuildRole]
    Properties:
      Name: !Sub '${AWS::StackName}-ecs-image'
      Description: A description about my project
      ServiceRole: !GetAtt 'CodeBuildRole.Arn'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        # Info: http://docs.aws.amazon.com/codebuild/latest/userguide/sample-docker.html
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        # http://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref.html
        Image: aws/codebuild/docker:1.12.1
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: IMAGE_REPO_NAME
            Value: !Sub '${AWS::StackName}-containerimage'
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
      Source:
        Location: !GetAtt 'CodeRepo.CloneUrlHttp'
        Type: CODEPIPELINE
      TimeoutInMinutes: 300 # 5min
  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodeDeploy'
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service: [codedeploy.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-CodeDeploy-policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow CodeDeploy to deploy code into EC2
              - Effect: Allow
                Action:
                  - ec2:*
                  - autoscaling:* # something is required for CodeDeployDefault.AllAtOnce
                Resource: '*'
      Path: /
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
  CodeDeployApplicationdeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentConfigName: 'CodeDeployDefault.HalfAtATime'
      AutoScalingGroups: [!Ref EC2AutoScalingGroup]
      ServiceRoleArn: !GetAtt 'CodeDeployTrustRole.Arn'
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodePipelineServiceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Pull repo
              - Effect: Allow
                Action:
                  - codecommit:BatchGetRepositories
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codecommit:List*
                  - codecommit:UploadArchive
                Resource:
                  # TODO: paramenterize pm=test => RepositoryName
                  - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-repo'
              - Effect: Allow
                Action:
                  - ecr:BatchGetImage
                Resource:
                  - !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-containerimage'
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - codedeploy:*
                Resource: '*'
  ArtifactStoreS3Location:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-codepipeline-artifacts'
  ArtifactStoreS3LocationPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ArtifactStoreS3Location
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-codepipeline-artifacts'
              - !Sub 'arn:aws:s3:::${AWS::StackName}-codepipeline-artifacts/*'
            Principal: '*'
  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Condition: cEnableContainers
    Properties:
      RoleName: !Sub '${AWS::StackName}-CloudFormationExecutionRole'
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service: [cloudformation.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*
                  - application-autoscaling:*
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline    
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: !GetAtt 'CodePipelineServiceRole.Arn'
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: !GetAtt 'CodeRepo.Name'
                BranchName: master
        - Name: Build
          Actions:
            - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuildArtifact
              RunOrder: 1
            - Name: TestArtifact
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodePipelineTestArtifact
              RunOrder: 2
            - !If 
              - cEnableContainers
              - Name: BuildDockerImage
                InputArtifacts:
                  - Name: SourceOutput
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                OutputArtifacts:
                  - Name: DockerImageOutput
                Configuration:
                  ProjectName: !Ref CodeBuildDockerImage
              - !Ref 'AWS::NoValue'
        - Name: Beta
          Actions:
            - Name: BetaEC2
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployApplicationdeploymentGroup
            # - !If 
            #   - cEnableContainers
            #   - Name: BetaECS
            #     ActionTypeId:
            #       Category: Deploy
            #       Owner: AWS
            #       Version: 1
            #       Provider: CloudFormation
            #     Configuration:
            #       ChangeSetName: Deploy
            #       ActionMode: CREATE_UPDATE
            #       # StackName: !Ref StackName
            #       StackName: !Sub '${AWS::StackName}-ContainerApp'
            #       Capabilities: CAPABILITY_NAMED_IAM
            #       # TemplatePath: Template::cloudformation.template.myapp.yaml
            #       TemplatePath: SourceOutput::cloudformation/containerapp.template.yaml
            #       RoleArn: !GetAtt 'CloudFormationExecutionRole.Arn'
            #       # Can't be a YAML object:  Value of property Configuration must be an object with String (or simple type) properties
            #       # ParameterOverrides
            #       #   ECSTargetGroup: !Ref ECSTargetGroup
            #       #   ECSServiceRole: !Ref ECSServiceRole
            #       #   DBAddress: !GetAtt 'DBInstance.Endpoint.Address'
            #       ParameterOverrides: !Sub |
            #         {
            #           "ParamsPrefix": "${AWS::StackName}",
            #           "Cluster": "${ContainerCluster}",
            #           "CloudwatchLogsGroup": "${LogGroupAppLog}",
            #           "DockerImageTag": { "Fn::GetParam" : ["DockerImageOutput", "build.json", "tag"] },
            #           "DockerImage": "${AWS::StackName}-containerimage",
            #           "TaskRole": "${TaskRole}",
            #           "ECSTargetGroup": "${ECSTargetGroup}",
            #           "ECSServiceRole": "${ECSServiceRole}",                    
            #         }
            #     InputArtifacts:
            #       - Name: DockerImageOutput
            #       - Name: SourceOutput
            #   - !Ref 'AWS::NoValue'
        - !If
          - cEnableContainers 
          - Name: IntegrationTests
            Actions:
              - Name: HTTP
                InputArtifacts:
                  - Name: BuildArtifact
                ActionTypeId:
                  Category: Build
                  Owner: AWS
                  Version: 1
                  Provider: CodeBuild
                # OutputArtifacts:
                #  - Name: BuildArtifact
                Configuration:
                  ProjectName: !Ref IntegrationTestAartifact
          - !Ref 'AWS::NoValue'
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreS3Location
  #####################################################################################
  # End of CI/CD
  #####################################################################################

  #####################################################################################
  # Start of Log Groups
  #####################################################################################
  LogGroupAppLog:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-applog'
      RetentionInDays: 7
  LogGroupCloudInit:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-cloudinitoutput'
      RetentionInDays: 7
  LogGroupSysLog:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-syslog'
      RetentionInDays: 7

  #####################################################################################
  # Start of Public DNS
  #####################################################################################
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: al-labs.co.uk.
      Comment: Zone apex alias targeted to myELB LoadBalancer.
      RecordSets:
        # One subdoamin for each type
        - Name: !Sub 'ec2.${AWS::StackName}.al-labs.co.uk.'
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'EC2ALB.CanonicalHostedZoneID'
            DNSName: !GetAtt 'EC2ALB.DNSName'
        # - !If 
        #   - cEnableContainers
        #   - Name: !Sub 'ecs.${AWS::StackName}.al-labs.co.uk.'
        #     Type: A
        #     AliasTarget:
        #       HostedZoneId: !GetAtt 'ECSALB.CanonicalHostedZoneID'
        #       DNSName: !GetAtt 'ECSALB.DNSName'
        #   - !Ref 'AWS::NoValue'
    Condition: cEnableDNS
  #####################################################################################
  # End of Public DNS
  #####################################################################################
