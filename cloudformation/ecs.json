{
    "ECSLaunchConfig": {
        "Type": "AWS::AutoScaling::LaunchConfiguration", 
        "Condition": "cEnableContainers", 
        "Metadata": {
            "AWS::CloudFormation::Init": {
                "config": {
                    "packages": {
                        "yum": {
                            "awslogs": []
                        }
                    }, 
                    "files": {
                        "/etc/awslogs/awscli.conf": {
                            "content": {
                                "Fn::Sub": "[plugins]\ncwlogs = cwlogs\n[default]\nregion = ${AWS::Region}\n"
                            }, 
                            "mode": "000400", 
                            "owner": "root", 
                            "group": "root"
                        }, 
                        "/etc/awslogs/awslogs.conf": {
                            "content": {
                                "Fn::Sub": "[general]\nstate_file = /var/lib/awslogs/agent-state\n[cloud-init-outputlog]\nfile = /var/log/cloud-init-output.log\nlog_group_name =  ${LogGroupCloudInit}\nlog_stream_name = cloudinit.outputlog-{instance_id}\ndatetime_format = %d/%b/%Y:%H:%M:%S\n[system-log]\nfile = /var/log/messages\nlog_group_name =  ${LogGroupSysLog}\nlog_stream_name = syslog-{instance_id}\ndatetime_format = %b %d %H:%M:%S\n"
                            }, 
                            "mode": "000400", 
                            "owner": "root", 
                            "group": "root"
                        }
                    }, 
                    "services": {
                        "sysvinit": {
                            "awslogs": {
                                "enabled": true, 
                                "ensureRunning": true, 
                                "files": [
                                    "/etc/awslogs/awslogs.conf", 
                                    "/etc/awslogs/awscli.conf"
                                ]
                            }
                        }
                    }
                }
            }
        }, 
        "Properties": {
            "InstanceType": {
                "Ref": "InstanceType"
            }, 
            "ImageId": {
                "Fn::FindInMap": [
                    "AWSRegionECSAMI", 
                    {
                        "Ref": "AWS::Region"
                    }, 
                    "ecs"
                ]
            }, 
            "SpotPrice": {
                "Fn::If": [
                    "cEnableSpotInstances", 
                    {
                        "Ref": "SpotPricing"
                    }, 
                    {
                        "Ref": "AWS::NoValue"
                    }
                ]
            }, 
            "KeyName": {
                "Ref": "KeyPairName"
            }, 
            "SecurityGroups": [
                {
                    "Ref": "ECSSecurityGroup"
                }
            ], 
            "IamInstanceProfile": {
                "Ref": "ECSInstanceProfile"
            }, 
            "InstanceMonitoring": true, 
            "UserData": {
                "Fn::Base64": {
                    "Fn::Sub": "#!/bin/bash -xe\n\necho ECS_CLUSTER=${ContainerCluster} >> /etc/ecs/ecs.config\nyum install -y aws-cfn-bootstrap\n\n# We can \"trap\" errors and use cfn-signal to \"stop\" the deploy\nfunction error_exit\n{\n  /opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}\n  exit 1\n}\ntrap 'error_exit' ERR\n\n# Call CFN-INIT to process the metadata for CloudFormation Init.\n/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSLaunchConfig --region ${AWS::Region}\n\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}\n"
                }
            }
        }
    }
}