{
  "Description": "Automation Logic Cloud Platform",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Domain Name:"
          },
          "Parameters": [
            "HostedZoneID"
          ]
        },
        {
          "Label": {
            "default": "Database Configuration:"
          },
          "Parameters": [
            "DBName",
            "DBUsername",
            "DBPassword",
            "DBInstanceClass",
            "DBAllocatedStorage"
          ]
        },
        {
          "Label": {
            "default": "Auto-Scaling Web Server Group's Instance Configuration: "
          },
          "Parameters": [
            "InstanceType",
            "InstanceCount",
            "InstanceMaxCount",
            "InstanceMinCount"
          ]
        },
        {
          "Label": {
            "default": "Security: "
          },
          "Parameters": [
            "KeyPairName",
            "SSHLocation",
            "UserName",
            "UseHTTPS"
          ]
        },
        {
          "Label": {
            "default": "Notification: "
          },
          "Parameters": [
            "OperatorEMail"
          ]
        },
        {
          "Label": {
            "default": "Tags: "
          },
          "Parameters": [
            "TagKey",
            "TagValue"
          ]
        },
        {
          "Label" : {
            "default": "Logging: "
          },
          "Parameters":[
            "LogCloudTrail",
            "DeployESCluster",
            "ClusterSize",
            "IPAccess"
          ]
        }
      ],
      "ParameterLabels": {
        "DBName": {
          "default": "Database Name"
        },
        "DBUsername": {
          "default": "Database User Name"
        },
        "DBPassword": {
          "default": "Database Password"
        },
        "DBInstanceClass": {
          "default": "Database Instance Class"
        },
        "DBAllocatedStorage": {
          "default": "Database Storage"
        },
        "HostedZoneID": {
          "default": "Hosted Zone ID"
        },
        "UseHTTPS": {
          "default": "Use HTTPS"
        },
        "DeployESCluster": {
          "default": "Deploy Elasticsearch"
        },
        "ClusterSize": {
          "default": "Size of Elasticsearch cluster"
        },
        "IPAccess": {
          "default": "Allowed IPs for Elasticsearch"
        },
        "LogCloudTrail": {
          "default": "Enable CloudTrail Logging"
        }
      }
    }
  },
  "Parameters": {
    "OperatorEMail": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "Default": "xavier.thomas@automationlogic.com",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."
    },
    "UserName": {
      "Description": "The Username of the User creating the stack. Used to provide IAM permisions.",
      "Type": "String",
      "Default": "xavier.thomas"
    },
    "TagKey": {
      "Description": "The EC2 tag key that identifies this as a target for deployments.",
      "Type": "String",
      "Default": "Name",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "TagValue": {
      "Description": "The EC2 tag value that identifies this as a target for deployments.",
      "Type": "String",
      "Default": "AL Cloud Platform",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "HostedZoneID": {
      "Description": "Name of an existing Amazon Route53 HostedZone ID. Defaults to al-labs.co.uk.",
      "Type": "AWS::Route53::HostedZone::Id",
      "MinLength": "1",
      "MaxLength": "32",
      "Default": "Z2KFA2A6JE8TAK"
    },
    "KeyPairName": {
      "Description": "Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "255",
      "Default": "xavierkey",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "KeyPairName is a required Field and can contain only ASCII characters."
    },
    "InstanceType": {
      "Description": "WebServer EC2 Spot Priced Instance type",
      "Type": "String",
      "Default": "c3.large",
      "AllowedValues": [
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "g2.2xlarge",
        "r3.large",
        "r4.large",
        "i3.large"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "InstanceCount": {
      "Description": "Number of Amazon EC2 instances to Launch. (Must be a number between 1 and 3).",
      "Type": "Number",
      "Default": "3",
      "ConstraintDescription": "Must be a number between 1 and 3.",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "InstanceMaxCount": {
      "Description": "Maximum Number of Amazon EC2 instances in an autoscaling group. (Must be a number between 3 and 5)",
      "Type": "Number",
      "Default": "5",
      "ConstraintDescription": "Must be a number between 1 and 5.",
      "MinValue": "3",
      "MaxValue": "5"
    },
    "InstanceMinCount": {
      "Description": "Minimum Number of Amazon EC2 instances in an autoscaling group. (Must be a number between 1 and 3).",
      "Type": "Number",
      "Default": "1",
      "ConstraintDescription": "Must be a number between 1 and 3.",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "SSHLocation": {
      "Description": "The IP address range that can be used to connect using SSH or RDP to the Amazon EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "DBName": {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
      "Default": "todo",
      "Description": "The database name",
      "MaxLength": "64",
      "MinLength": "1",
      "Type": "String"
    },
    "DBUsername": {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.",
      "Default": "admin",
      "Description": "The database admin account username",
      "MaxLength": "16",
      "MinLength": "1",
      "NoEcho": "true",
      "Type": "String"
    },
    "DBPassword": {
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters.",
      "Default": "password",
      "Description": "The database admin account password",
      "MaxLength": "41",
      "MinLength": "8",
      "NoEcho": "true",
      "Type": "String"
    },
    "DBInstanceClass": {
      "AllowedValues": [
        "db.m1.small",
        "db.m1.large"
      ],
      "ConstraintDescription": "must select a valid database instance type.",
      "Default": "db.m1.small",
      "Description": "Database instance class",
      "Type": "String"
    },
    "DBAllocatedStorage": {
      "ConstraintDescription": "must be between 5 and 1024Gb.",
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "MaxValue": "1024",
      "MinValue": "5",
      "Type": "Number"
    },
    "UseHTTPS": {
      "Description": "Enable / Disable HTTPS configuration.",
      "AllowedValues": [
        "Enable",
        "Disable"
      ],
      "Default": "Disable",
      "Type": "String"
    },
    "DeployESCluster": {
      "Description": "Deploy Elasticsearch and Kibana to store logs and metrics. If you leave this disabled you will be stable to watch your logs and metrics in CloudWatch.",
      "AllowedValues": [
        "True",
        "False"
      ],
      "Default": "True",
      "Type": "String"
    },
    "ClusterSize": {
        "AllowedValues": [
            "Tiny",
            "Small",
            "Medium",
            "Large"
        ],
        "Default": "Medium",
        "Description": "Amazon ES cluster size: small (2 data nodes), medium (4 data nodes), large (6 data nodes)",
        "Type": "String"
    },
    "IPAccess": {
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
        "Description": "IP address range that can access Elasticsearch",
        "Default": "0.0.0.0/0",
        "MaxLength": "18",
        "MinLength": "9",
        "Type": "String"
    },
    "LogCloudTrail": {
      "Description": "Enable / Disable CloudTrail Logging.",
      "AllowedValues": [
        "Enable",
        "Disable"
      ],
      "Default": "Enable",
      "Type": "String"
    }
  },
  "Mappings": {
    "Region2AMI": {
      "us-east-1": {
        "Ubuntu": "ami-6edd3078"
      },
      "us-east-2": {
        "Ubuntu": "ami-fcc19b99"
      },
      "us-west-1": {
        "Ubuntu": "ami-539ac933"
      },
      "us-west-2": {
        "Ubuntu": "ami-7c803d1c"
      },
      "eu-west-1": {
        "Ubuntu": "ami-405f7226"
      },
      "eu-west-2": {
        "Ubuntu": "ami-ede2e889"
      },
      "eu-central-1": {
        "Ubuntu": "ami-5aee2235"
      },
      "ap-southeast-1": {
        "Ubuntu": "ami-b1943fd2"
      },
      "ap-southeast-2": {
        "Ubuntu": "ami-fe71759d"
      },
      "ap-northeast-1": {
        "Ubuntu": "ami-eb49358c"
      },
      "ap-northeast-2": {
        "Ubuntu": "ami-93d600fd,"
      },
      "ap-south-1": {
        "Ubuntu": "ami-dd3442b2"
      },
      "ca-central-1": {
        "Ubuntu": "ami-3d299b59"
      },
      "sa-east-1": {
        "Ubuntu": "ami-7379e31f"
      }
    },
    "MasterSizing": {
        "elasticsearch": {
            "Large": "m3.medium.elasticsearch",
            "Medium": "m3.medium.elasticsearch",
            "Small": "t2.small.elasticsearch",
            "Tiny": "t2.small.elasticsearch"
        }
    },
    "instanceCount": {
        "elasticsearch": {
            "Large": "10",
            "Medium": "4",
            "Small": "2",
            "Tiny": "2"
        }
    },
    "instanceSizing": {
        "elasticsearch": {
            "Large": "r3.8xlarge.elasticsearch",
            "Medium": "r3.2xlarge.elasticsearch",
            "Small": "m3.large.elasticsearch",
            "Tiny": "t2.medium.elasticsearch"
        }
    }
  },
  "Conditions": {
    "cEnableHTTPS": {
      "Fn::Equals": [
        {
          "Ref": "UseHTTPS"
        },
        "Enable"
      ]
    },
    "cEnableES": {
      "Fn::Equals": [
        {
          "Ref": "DeployESCluster"
        },
        "True"
      ]
    },
    "SizeLarge": {
        "Fn::Equals": [
            {
                "Ref": "ClusterSize"
            },
            "Large"
        ]
    },
    "SizeMedium": {
        "Fn::Equals": [
            {
                "Ref": "ClusterSize"
            },
            "Medium"
        ]
    },
    "SizeSmall": {
        "Fn::Equals": [
            {
                "Ref": "ClusterSize"
            },
            "Small"
        ]
    },
    "SizeTiny": {
        "Fn::Equals": [
            {
                "Ref": "ClusterSize"
            },
            "Tiny"
        ]
    },
    "cEnableCloudTrail": {
      "Fn::Equals": [
        {
          "Ref": "LogCloudTrail"
        },
        "Enable"
      ]
    }
  },
  "Resources": {
    "CloudTrailToCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "Comment": "IAM Role for the CloudTrail Logs to be written to the CloudWatch Logs Group"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "cloudtrail.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "CloudTrailToCloudWatchLogsRolePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "AWSCloudTrailCreateLogStreamAndPutLogEvents2014",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {"Fn::GetAtt":["LogGroupCloudTrail","Arn"]}
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "CloudTrail": {
      "Type" : "AWS::CloudTrail::Trail",
      "DeletionPolicy" : "Delete",
      "DependsOn" : ["LogStoreS3LocationPolicy","CloudTrailToCloudWatchLogsRole","LogGroupCloudTrail"],
      "Properties" : {
        "CloudWatchLogsLogGroupArn" : {"Fn::GetAtt":["LogGroupCloudTrail","Arn"]},
        "CloudWatchLogsRoleArn" : {"Fn::GetAtt":["CloudTrailToCloudWatchLogsRole","Arn"]},
        "EnableLogFileValidation" : false,
        "IncludeGlobalServiceEvents" : true,
        "IsLogging" : true,
        "IsMultiRegionTrail" : false,
        "S3BucketName" : {"Ref":"LogStoreS3Location"}
      },
      "Condition" : "cEnableCloudTrail"
    },
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {
        "Comment": "Wait condition to wait for instance to spin up and send signal."
      },
      "Properties": {
        "Count": {
          "Ref": "InstanceCount"
        },
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "900"
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Endpoint": {
              "Ref": "OperatorEMail"
            },
            "Protocol": "email"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "Comment": "IAM Role for the Autoscaling web server group. Also Permits decryption of values encrypted under a KMS key without any restrictions."
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "Comment": "IAM Policy attached to Role for the Autoscaling web server group."
      },
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "ec2:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "rds:DescribeDBInstances",
                "s3:Get*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParameters"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:DescribeParameters"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:CreateLogGroup"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*:*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Metadata": {
        "Comment": "Instance Profile used to attach the IAM Role with the Autoscaling web server group."
      },
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "ParameterStoreLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "Comment": "LambdaRole permits encryption of values under a KMS key without any restrictions and allows write to S3 to store the value"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "ParameterStoreLambdaRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "Comment": "IAM Policy attached to Role for the Lambda. "
      },
      "Properties": {
        "PolicyName": "ParameterStoreLambdaRolePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-ParameterStoreLambda:*" }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:PutParameter",
                "ssm:DeleteParameter"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ParameterStoreLambdaRole"
          }
        ]
      }
    },
    "MyKey": {
      "Type": "AWS::KMS::Key",
      "Properties": {
        "Description": "A sample key",
        "KeyPolicy": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "Allow administration of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/${UserName}"
                }
              },
              "Action": [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/${UserName}"
                }
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
                "kms:DescribeKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow encrypting under this key.",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "ParameterStoreLambdaRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Encrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow decrypting of any value encrypted under this key.",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::GetAtt": [
                    "InstanceRole",
                    "Arn"
                  ]
                }
              },
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/devuser"
                }
              },
              "Action": [
                "kms:Encrypt",
                "kms:Decrypt",
                "kms:GenerateDataKey"
              ],
              "Resource": "*"
            },
            {
              "Sid": "Allow use of the key",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:user/qauser"
                }
              },
              "Action": [
                "kms:Decrypt"
              ],
              "Resource": "*"
            }
          ]
        }
      }
    },
    "MyKeyAlias": {
      "Type": "AWS::KMS::Alias",
      "Properties": {
        "AliasName": {
          "Fn::Sub": "alias/${AWS::StackName}-masterkey"
        },
        "TargetKeyId": {
          "Ref": "MyKey"
        }
      }
    },
    "ParameterStoreLambdaLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/lambda/${AWS::StackName}-ParameterStoreLambda" },
        "RetentionInDays" : 1
      }
    },
    "ParameterStoreLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "FunctionName": {"Fn::Sub":"${AWS::StackName}-ParameterStoreLambda"},
        "Role": {
          "Fn::GetAtt": [
            "ParameterStoreLambdaRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var AWS = require('aws-sdk');",
                "var response = require('cfn-response');",
                "exports.lambda_handler = function (event, context) {",
                    "try {",
                        "var ssm = new AWS.SSM();",
                        "if(event.RequestType == 'Delete') {",
                            "response.send(event, context, response.SUCCESS); //do nothing and send success by default",
                        "}",
                        "var params = {",
                            "Name: event.ResourceProperties.Name,",
                            "Type: 'SecureString',",
                            "Value: event.ResourceProperties.Value,",
                            "KeyId: event.ResourceProperties.KeyId,",
                            "Overwrite: true",
                        "};",
                        "ssm.putParameter(params, function(err, data) {",
                            "if (err){",
                                "console.log(err, err.stack); // an error occurred",
                                "response.send(event, context, response.FAILED);",
                            "}",
                            "else{",
                                "console.log(data);           // successful response",
                                "response.send(event, context, response.SUCCESS);",
                            "}",
                        "});",
                    "}",
                    "catch (err) {",
                        "console.log('General Error.');",
                        "console.log(err);",
                        "response.send(event, context, response.FAILED);",
                    "}",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs4.3",
        "Timeout": "25"
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Metadata": {
        "Comment": "Virtual Private Cloud for the Application."
      },
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Metadata": {
        "Comment": "Internet gateway for the VPC."
      },
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.1.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "- PublicSubnet01"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnet02": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.2.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "- PublicSubnet02"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateSubnet01": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.3.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "- PrivateSubnet01"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateSubnet02": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.0.4.0/24",
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": ""
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "- PrivateSubnet02"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet01RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicRouteTable",
        "PublicSubnet01"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet01"
        }
      }
    },
    "PublicSubnet02RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn": [
        "PublicRouteTable",
        "PublicSubnet02"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet02"
        }
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "DependsOn": [
        "PrivateSubnet01",
        "PrivateSubnet02"
      ],
      "Properties": {
        "DBSubnetGroupDescription": "RDS Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PrivateSubnet01"
          },
          {
            "Ref": "PrivateSubnet02"
          }
        ]
      }
    },
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP and HTTPS ports for the Load Balancer",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 3000 and SSH access via port 22 for the EC2 Instances",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SSLCertificate": {
      "Type": "AWS::CertificateManager::Certificate",
      "DeletionPolicy": "Retain",
      "Properties": {
        "DomainName": {
          "Fn::Sub": "${AWS::StackName}.al-labs.co.uk"
        },
        "DomainValidationOptions": [
          {
            "DomainName": {
              "Fn::Sub": "${AWS::StackName}.al-labs.co.uk"
            },
            "ValidationDomain": "al-labs.co.uk"
          }
        ]
      },
      "Condition": "cEnableHTTPS"
    },
    "ELBLogsS3StoreLocation": {
      "Type": "AWS::S3::Bucket",
      "DependsOn": ["ELBLogsToCWLambda", "ELBLogLambdaInvokePermission"],
      "DeletionPolicy" : "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${AWS::StackName}-elb-logs"
        },
        "NotificationConfiguration": {
          "LambdaConfigurations": [ {
            "Function": { "Fn::GetAtt" : ["ELBLogsToCWLambda", "Arn"] },
            "Event": "s3:ObjectCreated:*"
          } ]
        },
        "LifecycleConfiguration":{
          "Rules":[
            {
              "ExpirationInDays" : 90,
              "Id" : {
                "Fn::Sub": "${AWS::StackName}-ELBLogMigrationLifecycleRule"
              },
              "Status" : "Enabled",
              "Transitions" : [
                {
                  "StorageClass" : "STANDARD_IA",
                  "TransitionInDays" : 30
                },
                {
                  "StorageClass" : "GLACIER",
                  "TransitionInDays" : 60
                }
               ]
            }
          ]
        }
      }
    },
    "ELBLogsS3StoreLocationPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ELBLogsS3StoreLocation"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [ "s3:*" ],
              "Resource": [ { "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-elb-logs/*" } ],
              "Principal": "*"
            }
          ]
        }
      }
    },
    "ApplicationLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn": "ELBLogsS3StoreLocation",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-loadbalancer"
        },
        "Scheme": "internet-facing",
        "Subnets": [
          {
            "Ref": "PublicSubnet01"
          },
          {
            "Ref": "PublicSubnet02"
          }
        ],
        "SecurityGroups": [
          {
            "Ref": "SecurityGroup"
          }
        ],
        "LoadBalancerAttributes": [
          { "Key": "access_logs.s3.enabled", "Value": "true" },
          { "Key": "access_logs.s3.bucket", "Value": { "Fn::Sub": "${AWS::StackName}-elb-logs"} }
        ]
      }
    },
    "ELBLogLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "Comment": "ELBLogLambdaRole allows Lambda to read from S3 and write to CloudWatch."
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "ELBLogLambdaRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "Comment": "IAM Policy attached to the ELBLogLambdaRole."
      },
      "Properties": {
        "PolicyName": "ELBLogLambdaRolePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-elb-logs/*"
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "ELBLogLambdaRole"
          }
        ]
      }
    },
    "ELBLogLambdaInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["ELBLogsToCWLambda", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": { "Ref" : "AWS::AccountId" }
      }
    },
    "ELBLogsToCWLambdaLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/lambda/${AWS::StackName}-ELBLogsToCWLambda" },
        "RetentionInDays" : 1
      }
    },
    "ELBLogsToCWLambda": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": "ELBLogLambdaRolePolicies",
      "Properties": {
        "FunctionName": {"Fn::Sub":"${AWS::StackName}-ELBLogsToCWLambda"},
        "Description": "This code will move your ELB logs from S3 to CloudWatch. It is compressed, so quite hard to read. Original: github.com/awslabs/cloudwatch-logs-centralize-logs",
        "Role": { "Fn::GetAtt" : ["ELBLogLambdaRole", "Arn"] },
        "Handler": "index.handler",
        "Code": {
          "ZipFile": {
            "Fn::Sub": "'use strict';const aws=require('aws-sdk');var zlib=require('zlib');const s3=new aws.S3({apiVersion:'2006-03-01'});const cloudWatchLogs=new aws.CloudWatchLogs({apiVersion:'2014-03-28'});const readline=require('readline');const stream=require('stream');const logGroupName='${AWS::StackName}-elblog';const logStreamName='ELB';exports.handler=(event,context,callback)=>{console.log('S3 object is:',event.Records[0].s3);const bucket=event.Records[0].s3.bucket.name;console.log('Name of S3 bucket is:',bucket);const key=decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g,' '));const params={Bucket:bucket,Key:key,};s3.getObject(params,(err,data)=>{if(err){console.log(err);const message=`Error getting object ${!key}from bucket ${!bucket}.Make sure they exist and your bucket is in the same region as this function.`;console.log(message);callback(message)}else{zlib.gunzip(data.Body,function(a,b){if(a){console.log('Error uncompressing data',a);return}var c=b.toString('ascii');manageLogGroups(c)});callback(null,data.ContentType)}});function manageLogGroups(c){var d={logGroupNamePrefix:logGroupName};cloudWatchLogs.describeLogGroups(d,function(a,b){if(a){console.log('Error while describing log group:',a);createLogGroup(c)}else{if(!b.logGroups[0]){console.log('Need to  create log group:',b);createLogGroup(c)}else{console.log('Success while describing log group:',b);manageLogStreams(c)}}})}function createLogGroup(c){var d={logGroupName:logGroupName};cloudWatchLogs.createLogGroup(d,function(a,b){if(a){console.log('error while creating log group: ',a,a.stack);return}else{console.log('Success in creating log group: ',logGroupName);manageLogStreams(c)}})}function manageLogStreams(c){var d={logGroupName:logGroupName,logStreamNamePrefix:logStreamName};cloudWatchLogs.describeLogStreams(d,function(a,b){if(a){console.log('Error during describe log streams:',a);createLogStream(c)}else{if(!b.logStreams[0]){console.log('Need to  create log stream:',b);createLogStream(c)}else{console.log('Log Stream already defined:',logStreamName);putLogEvents(b.logStreams[0].uploadSequenceToken,c)}}})}function createLogStream(c){var d={logGroupName:logGroupName,logStreamName:logStreamName};cloudWatchLogs.createLogStream(d,function(a,b){if(a){console.log('error while creating log stream: ',a,a.stack);return}else{console.log('Success in creating log stream: ',logStreamName);putLogEvents(null,c)}})}function putLogEvents(a,b){const MAX_BATCH_SIZE=1048576;const MAX_BATCH_COUNT=10000;const LOG_EVENT_OVERHEAD=26;var c=[];var d=[];var e=0;var f=new stream.PassThrough();f.end(b);var g=readline.createInterface({input:f});var h=0;g.on('line',(line)=>{++h;var i=line.split(' ',2)[1];var j=Date.parse(i);var k=line.length+LOG_EVENT_OVERHEAD;e+=k;if(e>=MAX_BATCH_SIZE||d.length>=MAX_BATCH_COUNT){c.push(d);d=[];e=k}d.push({message:line,timestamp:j})});g.on('close',()=>{c.push(d);sendBatches(a,c)})}function sendBatches(e,f){var g=0;var h=0;function sendNextBatch(a,b){if(a){console.log('Error sending batch: ',a,a.stack);return}else{var c=f.shift();if(c){++h;g+=c.length;sendBatch(b,c,sendNextBatch)}else{var d=`Successfully put ${!g}events in ${!h}f`;console.log(d);callback(null,d)}}}sendNextBatch(null,e)}function sendBatch(c,d,e){var f={logEvents:d,logGroupName:logGroupName,logStreamName:logStreamName};if(c){f['sequenceToken']=c}f.logEvents.sort(function(a,b){if(a.timestamp>b.timestamp){return 1}if(a.timestamp<b.timestamp){return-1}return 0});cloudWatchLogs.putLogEvents(f,function(a,b){if(a){console.log('Error during put log events: ',a,a.stack);e(a,null)}else{console.log(`Success in putting ${!f.logEvents.length}events`);e(null,b.nextSequenceToken)}})}};"
          }
        },
        "Runtime": "nodejs4.3"
      }
    },
    "ApplicationLoadBalancerTargetGroup": {
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-targetgroup"
        },
        "HealthCheckPath": "/",
        "HealthCheckIntervalSeconds": 30,
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 10,
        "HealthyThresholdCount": 2,
        "UnhealthyThresholdCount": 5,
        "Matcher": {
          "HttpCode": "200"
        },
        "Port": 3000,
        "Protocol": "HTTP",
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "300"
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "ApplicationLoadBalancerHTTPListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ApplicationLoadBalancerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "ApplicationLoadBalancerHTTPSListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {
              "Ref": "SSLCertificate"
            }
          }
        ],
        "DefaultActions": [
          {
            "Type": "forward",
            "TargetGroupArn": {
              "Ref": "ApplicationLoadBalancerTargetGroup"
            }
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationLoadBalancer"
        },
        "Port": "443",
        "Protocol": "HTTPS"
      },
      "Condition": "cEnableHTTPS"
    },
    "DNSRecordSet": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "al-labs.co.uk.",
        "Comment": "Zone apex alias targeted to  LoadBalancer.",
        "RecordSets": [
          {
            "Name": {
              "Fn::Sub": "${AWS::StackName}.al-labs.co.uk."
            },
            "Type": "A",
            "AliasTarget": {
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ApplicationLoadBalancer",
                  "CanonicalHostedZoneID"
                ]
              },
              "DNSName": {
                "Fn::GetAtt": [
                  "ApplicationLoadBalancer",
                  "DNSName"
                ]
              }
            }
          }
        ]
      }
    },
    "LogGroupAppLog":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub":"${AWS::StackName}-applog"},
        "RetentionInDays" : 7
      }
    },
    "LogGroupELBLog":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub":"${AWS::StackName}-elblog"},
        "RetentionInDays" : 7
      }
    },
    "LogGroupAppErrorLog":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub":"${AWS::StackName}-apperr"},
        "RetentionInDays" : 7
      }
    },
    "LogGroupCloudInit":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub":"${AWS::StackName}-cloudinitoutput"},
        "RetentionInDays" : 7
      }
    },
    "LogGroupSysLog":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub":"${AWS::StackName}-syslog"},
        "RetentionInDays" : 7
      }
    },
    "LogGroupCloudTrail":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" : { "Fn::Sub":"${AWS::StackName}-cloutrail"},
        "RetentionInDays" : 7
      },
      "Condition" : "cEnableCloudTrail"
    },
    "LogStoreS3Location": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${AWS::StackName}-logs"
        },
        "LifecycleConfiguration":{
          "Rules":[
            {
              "ExpirationInDays" : 90,
              "Id" : {
                "Fn::Sub": "${AWS::StackName}-LogMigrationLifecycleRule"
              },
              "Status" : "Enabled",
              "Transitions" : [
                {
                  "StorageClass" : "STANDARD_IA",
                  "TransitionInDays" : 30
                },
                {
                  "StorageClass" : "GLACIER",
                  "TransitionInDays" : 60
                }
               ]
            }
          ]
        }
      }
    },
    "LogStoreS3LocationPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "LogStoreS3Location"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Sid": "AWSCloudWatchLogsAclCheck",
              "Effect": "Allow",
              "Principal": {
                "Service": {"Fn::Sub":"logs.${AWS::Region}.amazonaws.com"}
              },
              "Action": "s3:GetBucketAcl",
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-logs"
                }
              ]
            },
            {
              "Sid": "AWSCloudWatchLogsWrite",
              "Effect": "Allow",
              "Principal": {
                "Service": {"Fn::Sub":"logs.${AWS::Region}.amazonaws.com"}
              },
              "Action": "s3:PutObject",
              "Resource":[
                {
                  "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-logs/*"
                }
              ],
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            },
            {
              "Sid": "AWSCloudTrailAclCheck",
              "Effect": "Allow",
              "Principal": { "Service":"cloudtrail.amazonaws.com"},
              "Action": "s3:GetBucketAcl",
              "Resource": { "Fn::Sub" : "arn:aws:s3:::${LogStoreS3Location}" }
            },
            {
              "Sid": "AWSCloudTrailWrite",
              "Effect": "Allow",
              "Principal": { "Service":"cloudtrail.amazonaws.com"},
              "Action": "s3:PutObject",
              "Resource": { "Fn::Sub" : "arn:aws:s3:::${LogStoreS3Location}/AWSLogs/${AWS::AccountId}/*"},
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "LogMigrationLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "Comment": "Lambda Role to allow log migration from cloudwatch logs to S3"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement":
          [{
            "Effect": "Allow",
            "Principal": { "Service": [ "lambda.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole"]
          }]
        }
      }
    },
    "LogMigrationLambdaRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "Comment": "IAM Policy attached to Role for the Log Migration Lambda. "
      },
      "Properties": {
        "PolicyName": "LogMigrationLambdaRolePolicy",
        "PolicyDocument": {
          "Statement":[
            {
              "Effect":"Allow",
              "Action": [
                  "logs:CreateExportTask"
              ],
              "Resource":
              [
                {
                  "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*:*"
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-LogMigrationLambda:*" }
            },
            {
              "Effect":"Allow",
              "Action": [
                  "s3:PutObject"
              ],
              "Resource":[
                {
                  "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-logs/*"
                }
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LogMigrationLambdaRole"
          }
        ]
      }
    },
    "LogMigrationScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(59 minutes)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["LogMigrationLambda", "Arn"] },
          "Id": "TargetFunctionV1"
        }]
      }
    },
    "PermissionForEventsToInvokeLogMigrationLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Ref": "LogMigrationLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["LogMigrationScheduledRule", "Arn"] }
      }
    },
    "LogMigrationLambdaLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/lambda/${AWS::StackName}-LogMigrationLambda" },
        "RetentionInDays" : 1
      }
    },
    "LogMigrationLambda" : {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.lambda_handler",
        "FunctionName": {"Fn::Sub":"${AWS::StackName}-LogMigrationLambda"},
        "Role": { "Fn::GetAtt" : ["LogMigrationLambdaRole", "Arn"] },
        "Code": {
          "ZipFile": { "Fn::Join": ["", [
          "var AWS = require('aws-sdk');\n",
          "exports.lambda_handler = function (event, context) {\n",
            "try {\n",
              "var cloudwatchlogs = new AWS.CloudWatchLogs();\n",
              "var now = new Date();\n",
              "var params = {\n",
                "destination:'",{"Fn::Sub": "${AWS::StackName}-logs"},"',\n",
                "from: now.getTime() - 3600000,\n",
                "logGroupName:'",{"Fn::Sub": "${AWS::StackName}-applog"},"',\n",
                "to: now.getTime(),\n",
                "taskName: 'LogTask_applog_'+now.getTime().toString()\n",
              "};\n",
              "console.log('Log Migrate Action Called with Params : ' +JSON.stringify(params));\n",
              "cloudwatchlogs.createExportTask(params, function(err, data) {\n",
                  "if (err){\n",
                      "console.log('Error : '+ err, err.stack); // an error occurred\n",
                  "}\n",
                  "else{\n",
                      "console.log('Success : ' + data);     // successful response\n",
                  "}\n",
              "});\n",
            "}\n",
            "catch (err) {\n",
                "console.log('General Error.');\n",
                "console.log(err);\n",
            "}\n",
          "};"
          ]]}
        },
        "Runtime": "nodejs6.10",
        "Timeout": "300"
      }
    },
    "AppRestartMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "App listening on port",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "App Restarts",
            "MetricValue": "1"
          }
        ]
      }
    },
    "AppGETsMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method=GET, url, status_code,bytes,responsetime,useragent]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "GETs",
            "MetricValue": "1"
          }
        ]
      }
    },
    "AppPOSTsMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method=POST, url, status_code,bytes,responsetime,useragent]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "POSTs",
            "MetricValue": "1"
          }
        ]
      }
    },
    "AppDELETEsMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method=DELETE, url, status_code,bytes,responsetime,useragent]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "DELETEs",
            "MetricValue": "1"
          }
        ]
      }
    },
    "AppBytesOutMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method, url, status_code,bytes,responsetime,useragent]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "Bytes_Out",
            "MetricValue": "$bytes"
          }
        ]
      }
    },
    "App4xxsMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method, url, status_code=4*,bytes,responsetime,useragent]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "4xx_error_count",
            "MetricValue": "1"
          }
        ]
      }
    },
    "App200sMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method, url, status_code=200,bytes,responsetime,useragent]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "HTTP OK",
            "MetricValue": "1"
          }
        ]
      }
    },
    "AppChromeUsersMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method, url, status_code,bytes,responsetime,useragent=*Chrome*]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "Chrome Users",
            "MetricValue": "1"
          }
        ]
      }
    },
    "AppFirefoxUsersMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": {
          "Ref": "LogGroupAppLog"
        },
        "FilterPattern": "[ip, timestamp, method, url, status_code,bytes,responsetime,useragent=*Firefox*]",
        "MetricTransformations": [
          {
            "MetricNamespace": {
              "Fn::Sub": "${AWS::StackName}"
            },
            "MetricName": "Firefox Users",
            "MetricValue": "1"
          }
        ]
      }
    },
    "App4xxRateAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Notify the Operator Email if the 4xx Error Rate is higher than 5 every hour",
        "AlarmName": {
          "Fn::Sub": "${AWS::StackName}-4xx_Error_count_alarm"
        },
        "MetricName": "4xx_error_count",
        "Namespace": {
          "Fn::Sub": "${AWS::StackName}"
        },
        "Statistic": "Sum",
        "Period": "1800",
        "EvaluationPeriods": "2",
        "Threshold": "5",
        "AlarmActions": [
          {
            "Ref": "NotificationTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "FilterName",
            "Value": {
              "Ref": "App4xxsMetricFilter"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "AppBytesOutAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Sample Alarm to demonstrate CloudWatch Alarms. Triggers when Average Bytes out is greater than 1000 every 10 minutes",
        "MetricName": "Bytes_Out",
        "AlarmName": {
          "Fn::Sub": "${AWS::StackName}-Bytes_Out_Alarm"
        },
        "Namespace": {
          "Fn::Sub": "${AWS::StackName}"
        },
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "1000",
        "AlarmActions": [
          {
            "Ref": "NotificationTopic"
          }
        ],
        "Dimensions": [
          {
            "Name": "FilterName",
            "Value": {
              "Ref": "AppBytesOutMetricFilter"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "SecurityGroupChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "SecurityGroupEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "SecurityGroupChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailSecurityGroupChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Security Group.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "SecurityGroupEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "NetworkAclChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "NetworkAclEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "NetworkAclChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailNetworkAclChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Network ACL.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "NetworkAclEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "GatewayChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "GatewayEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "GatewayChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailGatewayChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "GatewayEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "VpcChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "VpcEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "VpcChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailVpcChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "VpcEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "EC2InstanceChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "EC2InstanceEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "EC2InstanceChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailEC2InstanceChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, terminate, start, stop or reboot an EC2 instance.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "EC2InstanceEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "EC2LargeInstanceChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = RunInstances) && (($.requestParameters.instanceType = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "EC2LargeInstanceEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "EC2LargeInstanceChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailEC2LargeInstanceChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "EC2LargeInstanceEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "CloudTrailChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "CloudTrailEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "CloudTrailChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailChanges"},
        "AlarmDescription" : "Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "CloudTrailEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "ConsoleSignInFailuresMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.eventName = ConsoleLogin) && ($.errorMessage = \"Failed authentication\") }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "ConsoleSignInFailureCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "ConsoleSignInFailuresAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailConsoleSignInFailures"},
        "AlarmDescription" : "Alarms when an unauthenticated API call is made to sign into the console.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "ConsoleSignInFailureCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "3"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "AuthorizationFailuresMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{ ($.errorCode = \"*UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "AuthorizationFailureCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "AuthorizationFailuresAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailAuthorizationFailures"},
        "AlarmDescription" : "Alarms when an unauthorized API call is made.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "AuthorizationFailureCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "IAMPolicyChangesMetricFilter": {
      "Type": "AWS::Logs::MetricFilter",
      "Properties": {
        "LogGroupName": { "Ref" : "LogGroupCloudTrail" },
        "FilterPattern": "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}",
        "MetricTransformations": [
          {
            "MetricNamespace": {"Fn::Sub": "${AWS::StackName}-CloudTrailMetrics"},
            "MetricName": "IAMPolicyEventCount",
            "MetricValue": "1"
          }
        ]
      },
      "Condition" : "cEnableCloudTrail"
    },
    "IAMPolicyChangesAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmName" : {"Fn::Sub": "${AWS::StackName}-CloudTrailIAMPolicyChanges"},
        "AlarmDescription" : "Alarms when an API call is made to change an IAM policy.",
        "AlarmActions" : [{ "Ref" : "NotificationTopic" }],
        "MetricName" : "IAMPolicyEventCount",
        "Namespace" : "CloudTrailMetrics",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "EvaluationPeriods" : "1",
        "Period" : "300",
        "Statistic" : "Sum",
        "Threshold" : "1"
      },
      "Condition" : "cEnableCloudTrail"
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment": "Install a simple application and decrypt secrets and set as environment variable.",
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "apt": {
                "mysql-client": []
              }
            },
            "files": {
              "/tmp/cwlogs/logstreams.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[general]\n",
                      "state_file= /var/awslogs/agent-state\n",
                      "[nodejs-serverlog]\n",
                      "file = /tmp/server.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "LogGroupAppLog"
                      },
                      "\n",
                      "log_stream_name = nodejs.serverlog-{instance_id}\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[nodejs-errorlog]\n",
                      "file = /tmp/server.err\n",
                      "log_group_name = ",
                      {
                        "Ref": "LogGroupAppErrorLog"
                      },
                      "\n",
                      "log_stream_name = nodejs.errorlog-{instance_id}\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[cloud-init-outputlog]\n",
                      "file = /var/log/cloud-init-output.log\n",
                      "log_group_name = ",
                      {
                        "Ref": "LogGroupCloudInit"
                      },
                      "\n",
                      "log_stream_name = cloudinit.outputlog-{instance_id}\n",
                      "datetime_format = %d/%b/%Y:%H:%M:%S\n",
                      "[system-log]\n",
                      "file = /var/log/syslog\n",
                      "log_group_name = ",
                      {
                        "Ref": "LogGroupSysLog"
                      },
                      "\n",
                      "log_stream_name = syslog-{instance_id}\n",
                      "datetime_format = %b %d %H:%M:%S\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/lib/systemd/system/awslogs.service": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[Unit]",
                      "Description=The CloudWatch Logs agent",
                      "After=network.target",
                      "",
                      "[Service]",
                      "Restart=always",
                      "TimeoutSec=infinity",
                      "ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh",
                      "",
                      "[Install]",
                      "WantedBy=multi-user.target"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              }
            }
          }
        }
      },
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "InstanceRoleInstanceProfile"
        },
        "SpotPrice": "0.05",
        "ImageId": {
          "Fn::FindInMap": [
            "Region2AMI",
            {
              "Ref": "AWS::Region"
            },
            "Ubuntu"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyPairName"
        },
        "SecurityGroups": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "# Install CFN Bootstrap\n",
                "sudo apt-get -y update\n",
                "sudo apt-get -y install ruby\n",
                "sudo apt-get -y install wget\n",
                "sudo apt-get -y install python-pip\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "# Helper function.\n",
                "function error_exit\n",
                "{\n",
                "  cfn-signal -e 1 -r \"$1\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install the AWS CodeDeploy Agent.\n",
                "cd /home/ubuntu/\n",
                "wget https://aws-codedeploy-us-west-1.s3.amazonaws.com/latest/install || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "chmod +x ./install || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                "sudo ./install auto || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",
                "# Install the latest AWS CLI. \n",
                "sudo pip install --upgrade awscli || error_exit \n",
                "# Configure the AWS CLI to use the Curent Region by Default \n",
                "aws configure set region ",
                {
                  "Ref": "AWS::Region"
                },
                " || error_exit \n",
                "#Download and install the latest NodeJs version \n",
                "# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions \n",
                "curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash - || error_exit \n",
                "apt-get install -y nodejs || error_exit \n",
                "# Call CFN-INIT to process the metadata for CloudFormation Init. Since ubuntu does not have the tools installed, we install the CFN Bootstrap in the previous step.\n",
                "cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource LaunchConfig ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "#Download and Install the Cloudwatch Logs agent. \n",
                "curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O || error_exit \n",
                "python awslogs-agent-setup.py -n -r ",
                {
                  "Ref": "AWS::Region"
                },
                " -c /tmp/cwlogs/logstreams.conf || error_exit 'Failed to run CloudWatch Logs agent setup'\n",
                "#Start the Cloudwatch logs agent service using the SYSTEMD Unit file created by cloudformation Init. \n",
                "systemctl enable awslogs.service \n",
                "systemctl start awslogs.service \n",
                "# All is well, so signal success.\n",
                "cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                {
                  "Ref": "WaitHandle"
                },
                "'\n",
                "# Send a Signal for creation policy to work.\n",
                "cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource AutoScalingGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "TargetGroupARNs": [
          {
            "Ref": "ApplicationLoadBalancerTargetGroup"
          }
        ],
        "DesiredCapacity": {
          "Ref": "InstanceCount"
        },
        "MaxSize": {
          "Ref": "InstanceMaxCount"
        },
        "MinSize": {
          "Ref": "InstanceMinCount"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "PublicSubnet01"
          },
          {
            "Ref": "PublicSubnet02"
          }
        ],
        "NotificationConfiguration": {
          "TopicARN": {
            "Ref": "NotificationTopic"
          },
          "NotificationTypes": [
            "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
          ]
        },
        "Tags": [
          {
            "Key": {
              "Ref": "TagKey"
            },
            "Value": {
              "Ref": "TagValue"
            },
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "Cooldown": "900",
        "ScalingAdjustment": "1"
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoScalingGroup"
        },
        "Cooldown": "900",
        "ScalingAdjustment": "-1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleUpPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [
          {
            "Ref": "WebServerScaleDownPolicy"
          }
        ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoScalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },
    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "DependsOn": [
        "AutoScalingGroup"
      ],
      "Properties": {
        "DBName": {
          "Ref": "DBName"
        },
        "Engine": "MySQL",
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "DBInstanceClass": {
          "Ref": "DBInstanceClass"
        },
        "DBSecurityGroups": [
          {
            "Ref": "DBSecurityGroup"
          }
        ],
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "DBSubnetGroupName": {
          "Ref": "DBSubnetGroup"
        },
        "BackupRetentionPeriod": "0"
      }
    },
    "EncryptDBUSERNAME": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn": [
        "MyKey",
        "MyKeyAlias",
        "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ParameterStoreLambda",
            "Arn"
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "AWS::StackName"
              },
              "db",
              "username"
            ]
          ]
        },
        "Value": {
          "Ref": "DBUsername"
        },
        "KeyId": {
          "Ref": "MyKey"
        }
      }
    },
    "EncryptDBPassword": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn": [
        "MyKey",
        "MyKeyAlias",
        "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ParameterStoreLambda",
            "Arn"
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "AWS::StackName"
              },
              "db",
              "password"
            ]
          ]
        },
        "Value": {
          "Ref": "DBPassword"
        },
        "KeyId": {
          "Ref": "MyKey"
        }
      }
    },
    "EncryptDBName": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn": [
        "MyKey",
        "MyKeyAlias",
        "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ParameterStoreLambda",
            "Arn"
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "AWS::StackName"
              },
              "db",
              "name"
            ]
          ]
        },
        "Value": {
          "Ref": "DBName"
        },
        "KeyId": {
          "Ref": "MyKey"
        }
      }
    },
    "EncryptDBCONNECTIONSTRING": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn": [
        "MyKey",
        "MyKeyAlias",
        "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ParameterStoreLambda",
            "Arn"
          ]
        },
        "Name": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "AWS::StackName"
              },
              "db",
              "connectionstring"
            ]
          ]
        },
        "Value": {
          "Fn::GetAtt": [
            "DBInstance",
            "Endpoint.Address"
          ]
        },
        "KeyId": {
          "Ref": "MyKey"
        }
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "DependsOn": [
        "InstanceSecurityGroup",
        "VPC"
      ],
      "Properties": {
        "EC2VpcId": {
          "Ref": "VPC"
        },
        "DBSecurityGroupIngress": [
          {
            "EC2SecurityGroupId": {
              "Ref": "InstanceSecurityGroup"
            }
          }
        ],
        "GroupDescription": "Frontend Access"
      }
    },
    "QAGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": {
          "Fn::Sub": "${AWS::StackName}-QA"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/IAMReadOnlyAccess",
          "arn:aws:iam::aws:policy/IAMUserSSHKeys"
        ],
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}-QA-Policy"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:BatchGetRepositories",
                    "codecommit:List*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:Get*",
                    "codecommit:GitPull"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:codecommit:eu-west-1:${AWS::AccountId}:${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:DescribeParameters"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "DevGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": {
          "Fn::Sub": "${AWS::StackName}-Dev"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/IAMReadOnlyAccess",
          "arn:aws:iam::aws:policy/IAMUserSSHKeys"
        ],
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}_dev_policy"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:BatchGetRepositories",
                    "codecommit:List*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:Get*",
                    "codecommit:GitPull",
                    "codecommit:GitPush"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:codecommit:eu-west-1:${AWS::AccountId}:${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:PutParameter"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:DescribeParameters"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                    }
                  ]
                },
                {
                  "Action": [
                    "logs:GetLogEvents",
                    "logs:DescribeMetricFilters",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}:*"
                    }
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "SecGroup": {
      "Type": "AWS::IAM::Group",
      "Properties": {
        "GroupName": {
          "Fn::Sub": "${AWS::StackName}-Sec"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/IAMReadOnlyAccess",
          "arn:aws:iam::aws:policy/IAMUserSSHKeys"
        ],
        "Policies": [
          {
            "PolicyName": {
              "Fn::Sub": "${AWS::StackName}_sec_policy"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:BatchGetRepositories",
                    "codecommit:List*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:Get*",
                    "codecommit:GitPull",
                    "codecommit:GitPush"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:codecommit:eu-west-1:${AWS::AccountId}:${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:PutParameter"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:DescribeParameters"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                    }
                  ]
                },
                {
                  "Action": [
                    "logs:GetLogEvents",
                    "logs:DescribeMetricFilters",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}:*"
                    }
                  ],
                  "Effect": "Allow"
                },
                {
                  "Action": [
                    "logs:DescribeLogGroups"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                    }
                  ],
                  "Effect": "Allow"
                }
              ]
            }
          }
        ]
      }
    },
    "AddUsersToDevGroup": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {
          "Ref": "DevGroup"
        },
        "Users": [
          "devuser"
        ]
      }
    },
    "AddUsersToQAGroup": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {
          "Ref": "QAGroup"
        },
        "Users": [
          "qauser"
        ]
      }
    },
    "AddUsersToSecGroup": {
      "Type": "AWS::IAM::UserToGroupAddition",
      "Properties": {
        "GroupName": {
          "Ref": "SecGroup"
        },
        "Users": [
          "secureuser"
        ]
      }
    },
    "CodeRepo": {
      "Type": "AWS::CodeCommit::Repository",
      "Properties": {
        "RepositoryName": {
          "Fn::Sub": "${AWS::StackName}-application"
        },
        "RepositoryDescription": "A code repository for the application"
      }
    },
    "CodeBuildRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-CodeBuild"
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codebuild.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "codebuild",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:GitPull"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application:log-stream"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application:log-stream:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-kibana:log-stream"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-kibana:log-stream:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application-image:log-stream"
                    },
                    {
                      "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application-image:log-stream:*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "CodeBuildLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/codebuild/${AWS::StackName}-application" },
        "RetentionInDays" : 1
      }
    },
    "CodeBuildKibanaLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "DeletionPolicy" : "Delete",
      "Condition": "cEnableES",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/codebuild/${AWS::StackName}-kibana" },
        "RetentionInDays" : 1
      }
    },
    "CodeBuild": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": [
        "CodeRepo",
        "CodeBuildRole"
      ],
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-application"
        },
        "Description": "A description about my project",
        "ServiceRole": {
          "Fn::GetAtt": "CodeBuildRole.Arn"
        },
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "Type": "LINUX_CONTAINER",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/nodejs:7.0.0"
        },
        "Source": {
          "Location": {
            "Fn::GetAtt": "CodeRepo.CloneUrlHttp"
          },
          "Type": "CODEPIPELINE",
          "BuildSpec": {
            "Fn::Sub": "version: 0.1\nphases:\n  build:\n    commands:\n      - echo Install NodeJS dependencies...\n      - npm install\nartifacts:\n  files:\n  - \"**/*\" # All files recursively\n"
          }
        },
        "TimeoutInMinutes": 300
      }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": "codedeploy.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-CodeDeployRole"
        }
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*",
                "ec2:TerminateInstances"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "elasticloadbalancing:DescribeLoadBalancers",
                "elasticloadbalancing:DescribeInstanceHealth",
                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "Tag:getResources",
                "Tag:getTags",
                "Tag:getTagsForResource",
                "Tag:getTagsForResourceList"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application"
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "DependsOn": [
        "CodeDeployApplication",
        "CodeDeployTrustRole",
        "AutoScalingGroup"
      ],
      "Properties": {
        "ApplicationName": {
          "Ref": "CodeDeployApplication"
        },
        "DeploymentConfigName": "CodeDeployDefault.HalfAtATime",
        "AutoScalingGroups": [
          {
            "Ref": "AutoScalingGroup"
          }
        ],
        "ServiceRoleArn": {
          "Fn::GetAtt": "CodeDeployTrustRole.Arn"
        }
      }
    },
    "CodePipelineServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Sub": "${AWS::StackName}-CodePipelineServiceRole"
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codepipeline.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "codecommit:BatchGetRepositories",
                    "codecommit:Get*",
                    "codecommit:GitPull",
                    "codecommit:List*",
                    "codecommit:UploadArchive"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:BatchGetImage"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-application"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:StartBuild",
                    "codebuild:BatchGetBuilds",
                    "cloudformation:*",
                    "iam:PassRole"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codedeploy:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ArtifactStoreS3Location": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${AWS::StackName}-artifacts"
        },
        "LifecycleConfiguration":{
          "Rules":[
            {
              "ExpirationInDays" : 7,
              "Id" : {
                "Fn::Sub": "${AWS::StackName}-ArtifactMigrationLifecycleRule"
              },
              "Status" : "Enabled"
            }
          ]
        }        
      }
    },
    "ArtifactStoreS3LocationPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ArtifactStoreS3Location"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": [
                {
                  "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-artifacts"
                },
                {
                  "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-artifacts/*"
                }
              ],
              "Principal": "*"
            }
          ]
        }
      }
    },
    "CodePipeline": {
      "Type": "AWS::CodePipeline::Pipeline",
      "DependsOn": [
        "AutoScalingGroup",
        "DBInstance"
      ],
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-application"
        },
        "RoleArn": {
          "Fn::GetAtt": "CodePipelineServiceRole.Arn"
        },
        "Stages": [
          {
            "Name": "Source",
            "Actions": [
              {
                "Name": {
                  "Fn::Sub": "${AWS::StackName}-Source"
                },
                "ActionTypeId": {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Version": 1,
                  "Provider": "CodeCommit"
                },
                "OutputArtifacts": [
                  {
                    "Name": {
                      "Fn::Sub": "${AWS::StackName}-SourceOutput"
                    }
                  }
                ],
                "Configuration": {
                  "RepositoryName": {
                    "Fn::GetAtt": "CodeRepo.Name"
                  },
                  "BranchName": "master"
                }
              }
            ]
          },
          {
            "Name": "Build",
            "Actions": [
              {
                "Name": {
                  "Fn::Sub": "${AWS::StackName}-Build"
                },
                "InputArtifacts": [
                  {
                    "Name": {
                      "Fn::Sub": "${AWS::StackName}-SourceOutput"
                    }
                  }
                ],
                "ActionTypeId": {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Version": 1,
                  "Provider": "CodeBuild"
                },
                "OutputArtifacts": [
                  {
                    "Name": {
                      "Fn::Sub": "${AWS::StackName}-Build"
                    }
                  }
                ],
                "Configuration": {
                  "ProjectName": {
                    "Ref": "CodeBuild"
                  }
                }
              },
              {
                "Fn::If" : [
                  "cEnableES",
                  {
                    "Name": {
                      "Fn::Sub": "${AWS::StackName}-BuildKibana"
                    },
                    "InputArtifacts": [
                      {
                        "Name": {
                          "Fn::Sub": "${AWS::StackName}-SourceOutput"
                        }
                      }
                    ],
                    "ActionTypeId": {
                      "Category": "Build",
                      "Owner": "AWS",
                      "Version": 1,
                      "Provider": "CodeBuild"
                    },
                    "Configuration": {
                      "ProjectName": {"Ref": "CodeBuildKibana"}
                    }
                  },
                  {"Ref": "AWS::NoValue"}
                ]                    
              }
            ]
          },
          {
            "Name": "Deploy",
            "Actions": [
              {
                "Name": "BetaAction",
                "InputArtifacts": [
                  {
                    "Name": {
                      "Fn::Sub": "${AWS::StackName}-Build"
                    }
                  }
                ],
                "ActionTypeId": {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Version": 1,
                  "Provider": "CodeDeploy"
                },
                "Configuration": {
                  "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                  },
                  "DeploymentGroupName": {
                    "Ref": "CodeDeployDeploymentGroup"
                  }
                }
              }
            ]
          }
        ],
        "ArtifactStore": {
          "Type": "S3",
          "Location": {
            "Ref": "ArtifactStoreS3Location"
          }
        }
      }
    },
    "ElasticsearchAWSLogs": {
      "Type": "AWS::Elasticsearch::Domain",
      "Condition": "cEnableES",
      "Properties": {
        "AccessPolicies": {
            "Statement": [
                {
                    "Action": "es:*",
                    "Condition": {
                        "IpAddress": {
                            "aws:SourceIp": [
                                {
                                    "Ref": "IPAccess"
                                }
                            ]
                        }
                    },
                    "Effect": "Allow",
                    "Principal": {
                        "AWS": "*"
                    },
                    "Resource": "*"
                }
            ],
            "Version": "2012-10-17"
        },
        "AdvancedOptions": {
            "rest.action.multi.allow_explicit_index": "true"
        },
        "DomainName": {
            "Fn::Sub": "logs-${AWS::StackName}"
        },
        "EBSOptions": {
            "Fn::If": [
                "SizeTiny",
                {
                    "EBSEnabled": true,
                    "Iops": 0,
                    "VolumeSize": 10,
                    "VolumeType": "gp2"
                },
                {
                    "Fn::If": [
                        "SizeSmall",
                        {
                            "EBSEnabled": true,
                            "Iops": 0,
                            "VolumeSize": 50,
                            "VolumeType": "gp2"
                        },
                        {
                            "Fn::If": [
                                "SizeMedium",
                                {
                                    "EBSEnabled": false
                                },
                                {
                                    "EBSEnabled": false
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "ElasticsearchClusterConfig": {
            "DedicatedMasterCount": "3",
            "DedicatedMasterEnabled": "true",
            "DedicatedMasterType": {
                "Fn::FindInMap": [
                    "MasterSizing",
                    "elasticsearch",
                    {
                        "Ref": "ClusterSize"
                    }
                ]
            },
            "InstanceCount": {
                "Fn::FindInMap": [
                    "instanceCount",
                    "elasticsearch",
                    {
                        "Ref": "ClusterSize"
                    }
                ]
            },
            "InstanceType": {
                "Fn::FindInMap": [
                    "instanceSizing",
                    "elasticsearch",
                    {
                        "Ref": "ClusterSize"
                    }
                ]
            },
            "ZoneAwarenessEnabled": "true"
        },
        "ElasticsearchVersion": "5.1",
        "SnapshotOptions": {
            "AutomatedSnapshotStartHour": "1"
        }
      }
    },
    "CodeBuildKibana": {
      "Type": "AWS::CodeBuild::Project",
      "DependsOn": [
        "CodeRepo",
        "CodeBuildRole",
        "ElasticsearchAWSLogs"
      ],
      "Condition": "cEnableES",
      "Properties": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-kibana"
        },
        "Description": "This build will deploy your Kibana dashboard.",
        "ServiceRole": {
          "Fn::GetAtt": "CodeBuildRole.Arn"
        },
        "Artifacts": {
          "Type": "CODEPIPELINE"
        },
        "Environment": {
          "Type": "LINUX_CONTAINER",
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/ubuntu-base:14.04"
        },
        "Source": {
          "Location": {
            "Fn::GetAtt": "CodeRepo.CloneUrlHttp"
          },
          "Type": "CODEPIPELINE",
          "BuildSpec": {
            "Fn::Sub": "version: 0.1\n\nphases:\n  build:\n    commands:\n      - cd kibana; ./load.sh -url https://${ElasticsearchAWSLogs.DomainEndpoint}\n\n"
          }
        },
        "TimeoutInMinutes": 300
      }
    },
    "LogStreamerRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "cEnableES",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "LogStreamerRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Condition": "cEnableES",
      "Metadata": {
        "Comment": "IAM Policy attached to the LogStreamerRole."
      },
      "Properties": {
        "PolicyName": "LogStreamerRolePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "es:*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [ {
          "Ref": "LogStreamerRole"
        } ]
      }
    },
    "applogLogStreamerInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "cEnableES",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["LogStreamer", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
        },
        "SourceAccount": { "Ref" : "AWS::AccountId" },
        "SourceArn": {
          "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-applog:*"
        }
      }
    },
    "syslogLogStreamerInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "cEnableES",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["LogStreamer", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
        },
        "SourceAccount": { "Ref" : "AWS::AccountId" },
        "SourceArn": {
          "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-syslog:*"
        }
      }
    },
    "elblogLogStreamerInvokePermission": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "cEnableES",
      "Properties": {
        "FunctionName" : { "Fn::GetAtt" : ["LogStreamer", "Arn"] },
        "Action": "lambda:InvokeFunction",
        "Principal": {
          "Fn::Sub": "logs.${AWS::Region}.amazonaws.com"
        },
        "SourceAccount": { "Ref" : "AWS::AccountId" },
        "SourceArn": {
          "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-elblog:*"
        }
      }
    },
    "LogStreamerLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "Condition": "cEnableES",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/lambda/${AWS::StackName}-LogStreamer" },
        "RetentionInDays" : 1
      }
    },
    "LogStreamer": {
      "Type": "AWS::Lambda::Function",
      "Condition": "cEnableES",
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-LogStreamer"
        },
        "Code": {
          "ZipFile": {
            "Fn::Sub": "var https=require('https');var zlib=require('zlib');var crypto=require('crypto');var endpoint='${ElasticsearchAWSLogs.DomainEndpoint}';exports.handler=function(i,j){var k=new Buffer(i.awslogs.data,'base64');zlib.gunzip(k,function(e,f){if(e){j.fail(e);return}var g=JSON.parse(f.toString('utf8'));var h=transform(g);if(!h){console.log('Received a control message');j.succeed('Control message handled successfully');return}post(h,function(a,b,c,d){console.log('Response: '+JSON.stringify({\"statusCode\":c}));if(a){console.log('Error: '+JSON.stringify(a,null,2));if(d&&d.length>0){console.log(\"Failed Items: \"+JSON.stringify(d,null,2))}j.fail(JSON.stringify(a))}else{console.log('Success: '+JSON.stringify(b));j.succeed('Success')}})})};function transform(f){if(f.messageType==='CONTROL_MESSAGE'){return null}var g='';f.logEvents.forEach(function(a){var b=new Date(1*a.timestamp);var c=['cwl-'+b.getUTCFullYear(),('0'+(b.getUTCMonth()+1)).slice(-2),('0'+b.getUTCDate()).slice(-2)].join('.');var d=buildSource(a.message,a.extractedFields);d['@id']=a.id;d['@timestamp']=new Date(1*a.timestamp).toISOString();d['@message']=a.message;d['@owner']=f.owner;d['@log_group']=f.logGroup;d['@log_stream']=f.logStream;var e={\"index\":{}};e.index._index=c;e.index._type=f.logGroup;e.index._id=a.id;g+=[JSON.stringify(e),JSON.stringify(d),].join('\\n')+'\\n'});return g}function buildSource(a,b){if(b){var c={};for(var d in b){if(b.hasOwnProperty(d)&&b[d]){var e=b[d];if(isNumeric(e)){c[d]=1*e;continue}jsonSubString=extractJson(e);if(jsonSubString!==null){c['$'+d]=JSON.parse(jsonSubString)}c[d]=e}}return c}jsonSubString=extractJson(a);if(jsonSubString!==null){return JSON.parse(jsonSubString)}return{}}function extractJson(a){var b=a.indexOf('{');if(b<0)return null;var c=a.substring(b);return isValidJson(c)?c:null}function isValidJson(a){try{JSON.parse(a)}catch(e){return false}return true}function isNumeric(n){return!isNaN(parseFloat(n))&&isFinite(n)}function post(g,h){var i=buildRequest(endpoint,g);var j=https.request(i,function(e){var f='';e.on('data',function(a){f+=a});e.on('end',function(){var a=JSON.parse(f);var b;var c;if(e.statusCode>=200&&e.statusCode<299){b=a.items.filter(function(x){return x.index.status>=300});c={\"attemptedItems\":a.items.length,\"successfulItems\":a.items.length-b.length,\"failedItems\":b.length}}var d=e.statusCode!==200||a.errors===true?{\"statusCode\":e.statusCode,\"responseBody\":f}:null;h(d,c,e.statusCode,b)})}).on('error',function(e){h(e)});j.end(i.body)}function buildRequest(c,d){var e=c.match(/^([^\\.]+)\\.?([^\\.]*)\\.?([^\\.]*)\\.amazonaws\\.com$/);var f=e[2];var g=e[3];var h=(new Date()).toISOString().replace(/[:\\-]|\\.\\d{3}/g,'');var i=h.substr(0,8);var j=hmac('AWS4'+process.env.AWS_SECRET_ACCESS_KEY,i);var l=hmac(j,f);var m=hmac(l,g);var n=hmac(m,'aws4_request');var o={host:c,method:'POST',path:'/_bulk',body:d,headers:{'Content-Type':'application/json','Host':c,'Content-Length':Buffer.byteLength(d),'X-Amz-Security-Token':process.env.AWS_SESSION_TOKEN,'X-Amz-Date':h}};var p=Object.keys(o.headers).sort(function(a,b){return a.toLowerCase()<b.toLowerCase()?-1:1}).map(function(k){return k.toLowerCase()+':'+o.headers[k]}).join('\\n');var q=Object.keys(o.headers).map(function(k){return k.toLowerCase()}).sort().join(';');var r=[o.method,o.path,'',p,'',q,hash(o.body,'hex'),].join('\\n');var s=[i,f,g,'aws4_request'].join('/');var t=['AWS4-HMAC-SHA256',h,s,hash(r,'hex')].join('\\n');o.headers.Authorization=['AWS4-HMAC-SHA256 Credential='+process.env.AWS_ACCESS_KEY_ID+'/'+s,'SignedHeaders='+q,'Signature='+hmac(n,t,'hex')].join(', ');return o}function hmac(a,b,c){return crypto.createHmac('sha256',a).update(b,'utf8').digest(c)}function hash(a,b){return crypto.createHash('sha256').update(a,'utf8').digest(b)}"
          }
        },
        "Description": "Lambda function for moving log data to Amazon Elasticsearch.",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [ "LogStreamerRole", "Arn" ]
        },
        "Runtime": "nodejs4.3",
        "Timeout": "300"
      }
    },
    "applogSubscriptionFilter": {
      "Condition": "cEnableES",
      "Type": "AWS::Logs::SubscriptionFilter",
      "DependsOn": "applogLogStreamerInvokePermission",
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt" : [ "LogStreamer", "Arn" ]
        },
        "FilterPattern": "[ip, date, method, request, statuscode, bytes, responsetime, user_agent]",
        "LogGroupName": { "Fn::Sub":"${AWS::StackName}-applog"}
      }
    },
    "syslogSubscriptionFilter": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "DependsOn": "syslogLogStreamerInvokePermission",
      "Condition": "cEnableES",
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt" : [ "LogStreamer", "Arn" ]
        },
        "FilterPattern": "[month, day, hour, host, service, message]",
        "LogGroupName": { "Fn::Sub":"${AWS::StackName}-syslog"}
      }
    },
    "elblogSubscriptionFilter": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "DependsOn": "elblogLogStreamerInvokePermission",
      "Condition": "cEnableES",
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt" : [ "LogStreamer", "Arn" ]
        },
        "FilterPattern": "[type, timestamp, elb, client, target, request_processing_time, target_processing_time, response_processing_time, elb_status_code, target_status_code, received_bytes, sent_bytes, request, user_agent, ssl_cipher, ssl_protocol, target_group_arn, trace_id]",
        "LogGroupName": { "Fn::Sub":"${AWS::StackName}-elblog"}
      }
    },
    "ElasticSearchSnapshotS3Location": {
      "Type": "AWS::S3::Bucket",
      "Condition": "cEnableES",
      "DeletionPolicy" : "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "${AWS::StackName}-snapshots"
        },
        "LifecycleConfiguration":{
          "Rules":[
            {
              "ExpirationInDays" : 90,
              "Id" : {
                "Fn::Sub": "${AWS::StackName}-SnapshotMigrationLifecycleRule"
              },
              "Status" : "Enabled",
              "Transitions" : [
                {
                  "StorageClass" : "STANDARD_IA",
                  "TransitionInDays" : 30
                },
                {
                  "StorageClass" : "GLACIER",
                  "TransitionInDays" : 60
                }
               ]
            }
          ]
        }
      }
    },
    "ElasticSearchSnapshotRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "cEnableES",
      "Metadata": {
        "Comment": "IAM Role for the Amazon ElasticSearch Service to Store Snapshots in an S3 Bucket"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "es.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ElasticSearchSnapshotPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action":[
                    "s3:ListBucket"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                    {"Fn::Sub": "arn:aws:s3:::${AWS::StackName}-snapshots"}
                  ]
                },
                {
                  "Action":[
                    "s3:GetObject",
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "iam:PassRole"
                  ],
                  "Effect":"Allow",
                  "Resource":[
                     {"Fn::Sub": "arn:aws:s3:::${AWS::StackName}-snapshots/*"}
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "SnapshotRepoCreateLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "cEnableES",
      "Metadata": {
        "Comment": "IAM Role for the Lambda to create a Elastic Search Snapshot Repo"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ElasticSearchSnapshotRepoLambdaPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-SnapshotRepoCreateLambda:*" }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "iam:PassRole"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "SnapshotRepoCreateLambdaLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "Condition": "cEnableES",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/lambda/${AWS::StackName}-SnapshotRepoCreateLambda" },
        "RetentionInDays" : 1
      }
    },
    "SnapshotRepoCreateLambda": {
      "Type": "AWS::Lambda::Function",
      "Condition": "cEnableES",
      "DependsOn": [        
        "ElasticsearchAWSLogs",
        "ElasticSearchSnapshotS3Location"
      ],      
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-SnapshotRepoCreateLambda"
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var https = require('https');",
                "var crypto = require('crypto');",
                "var response = require('cfn-response');",
                {"Fn::Sub": "var endpoint = '${ElasticsearchAWSLogs.DomainEndpoint}';"},
                "exports.handler = function (event, context) {",
                "var postObject = {",
                " type: 's3',",
                " settings: {",
                    {"Fn::Sub": "bucket: '${AWS::StackName}-snapshots',"},
                    {"Fn::Sub": "region: '${AWS::Region}',"},
                    {"Fn::Sub": "role_arn: '${ElasticSearchSnapshotRole.Arn}'"},
                  "}",
                "};",
                "var postData = JSON.stringify(postObject);",
                  "if(isValidJson(postData)) {",
                  "post(postData, function(error, success, statusCode) {",
                  "console.log('Response: ' + JSON.stringify({",
                  "'statusCode': statusCode",
                  "}));",
                  "if (error) {",
                  "console.log('postData Error: ' + JSON.stringify(error, null, 2));",
                  "response.send(event, context, response.FAILED);",
                  "} else {",
                  "console.log('Success: ' + JSON.stringify(success));",
                  " response.send(event, context, response.SUCCESS);",
                  "}",
                  "});",
                  "}else{",
                  "Console.log('Error: Invalid JSON Body');",
                  "response.send(event, context, response.FAILED);",
                  "}",
                  "};",
                  "function post(body, callback) {",
                  "console.log('endpoint:', endpoint);",
                  "var requestParams = buildRequest(endpoint, body);",
                  "console.log('requestParams:', requestParams);",
                  "var request = https.request(requestParams, function(response) {",
                  "var responseBody = '';",
                  "response.on('data', function(chunk) {",
                  "responseBody += chunk;",
                  "});",
                  "response.on('end', function() {",
                  "var info = JSON.parse(responseBody);",
                  "var success;",
                  "console.log('post info:', info);",
                  "var error = response.statusCode !== 200 || info.errors === true ? {",
                  "'statusCode': response.statusCode,",
                  "'responseBody': responseBody",
                  "} : null;",
                  "console.log('post error:', error);",
                  "callback(error, success, response.statusCode);",
                  "});",
                  "}).on('error', function(e) {",
                  "callback(e);",
                  "});",
                  "request.end(requestParams.body);",
                  "};",
                  "function buildRequest(endpoint, body) {",
                  "var endpointParts = endpoint.match(/^([^\\.]+)\\.?([^\\.]*)\\.?([^\\.]*)\\.amazonaws\\.com$/);",
                  "var region = endpointParts[2];",
                  "var service = endpointParts[3];",
                  "var datetime = (new Date()).toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');",
                  "var date = datetime.substr(0, 8);",
                  "var kDate = hmac('AWS4' + process.env.AWS_SECRET_ACCESS_KEY, date);",
                  "var kRegion = hmac(kDate, region);",
                  "var kService = hmac(kRegion, service);",
                  "var kSigning = hmac(kService, 'aws4_request');",
                  "var request = {",
                  "host: endpoint,",
                  "method: 'POST',",
                  "path: '/_snapshot/backups',",
                  "body: body,",
                  "headers: {",
                  "'Content-Type': 'application/json',",
                  "'Host': endpoint,",
                  "'Content-Length': Buffer.byteLength(body),",
                  "'X-Amz-Security-Token': process.env.AWS_SESSION_TOKEN,",
                  "'X-Amz-Date': datetime",
                  "}",
                  "};",
                  "var canonicalHeaders = Object.keys(request.headers)",
                  ".sort(function(a, b) { return a.toLowerCase() < b.toLowerCase() ? -1 : 1; })",
                  ".map(function(k) { return k.toLowerCase() + ':' + request.headers[k]; })",
                  ".join('\\n');",
                  "var signedHeaders = Object.keys(request.headers)",
                  ".map(function(k) { return k.toLowerCase(); })",
                  ".sort()",
                  ".join(';');",
                  "var canonicalString = [",
                  "request.method,",
                  "request.path, '',",
                  "canonicalHeaders, '',",
                  "signedHeaders,",
                  "hash(request.body, 'hex'),",
                  "].join('\\n');",
                  "var credentialString = [ date, region, service, 'aws4_request' ].join('/');",
                  "var stringToSign = [",
                  "'AWS4-HMAC-SHA256',",
                  "datetime,",
                  "credentialString,",
                  "hash(canonicalString, 'hex')",
                  "] .join('\\n');",
                  "request.headers.Authorization = [",
                  "'AWS4-HMAC-SHA256 Credential=' + process.env.AWS_ACCESS_KEY_ID + '/' + credentialString,",
                  "'SignedHeaders=' + signedHeaders,",
                  "'Signature=' + hmac(kSigning, stringToSign, 'hex')",
                  "].join(', ');",
                  "return request;",
                  "};",
                  "function hmac(key, str, encoding) {",
                  "return crypto.createHmac('sha256', key).update(str, 'utf8').digest(encoding);",
                  "};",
                  "function hash(str, encoding) {",
                  "return crypto.createHash('sha256').update(str, 'utf8').digest(encoding);",
                  "};",
                  "function isValidJson(message) {",
                  "try {",
                  "JSON.parse(message);",
                  "} catch (e) { return false; }",
                  "return true;",
                "};"
              ]
            ]
          }
        },
        "Description": "Lambda function for Creating a Snapshot Repo on S3 for Amazon Elasticsearch.",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [ "SnapshotRepoCreateLambdaRole", "Arn" ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": "300"
      }
    },
    "CreateSnapshotRepo": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "Condition": "cEnableES",
      "DependsOn": [
        "SnapshotRepoCreateLambda",
        "ElasticsearchAWSLogs",
        "ElasticSearchSnapshotS3Location"
      ],
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "SnapshotRepoCreateLambda",
            "Arn"
          ]
        }
      }
    },    
    "SnapshotCreateLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Condition": "cEnableES",
      "Metadata": {
        "Comment": "IAM Role for the Lambda to create a Elastic Search Snapshot on the S3 Bucket repo"
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ElasticSearchSnapshotCreateLambdaPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": { "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-SnapshotRepoCreateLambda:*" }
                }
              ]
            }
          }
        ],
        "Path": "/"
      }
    },
    "SnapshotCreateLambdaLogGroup":{
      "Type" : "AWS::Logs::LogGroup",
      "Condition": "cEnableES",
      "DeletionPolicy" : "Delete",
      "Properties" : {
        "LogGroupName" :{ "Fn::Sub": "/aws/lambda/${AWS::StackName}-SnapshotCreateLambda" },
        "RetentionInDays" : 1
      }
    },
    "SnapshotCreateLambda": {
      "Type": "AWS::Lambda::Function",
      "Condition": "cEnableES",
      "DependsOn": [        
        "ElasticsearchAWSLogs"
      ],
      "Properties": {
        "FunctionName": {
          "Fn::Sub": "${AWS::StackName}-SnapshotCreateLambda"
        },
        "Code": {
          "ZipFile": {
            "Fn::Sub": "var https=require('https');exports.handler=function (event,context){var now=new Date();var postData={};var options={hostname:'${ElasticsearchAWSLogs.DomainEndpoint}',path:'/_snapshot/backups/'+now.getUTCFullYear().toString()+'-'+(now.getUTCMonth() + 1).toString()+'-'+now.getUTCDate().toString(),method:'POST'};options.headers={'Content-Type':'application/json','Content-Length':Buffer.byteLength(JSON.stringify(postData))};console.log('Attempting to Submit Request : ');var postreq=https.request(options, (postres) => {postres.setEncoding('utf8');var responsecontent='';postres.on('data', (chunk) => {responsecontent += chunk;});postres.on('end', () => {console.log('Returned: '+ JSON.stringify(responsecontent));});});postreq.on('error', (e) => {console.log('problem with POST request: '+e.message);});postreq.write(JSON.stringify(postData)); postreq.end();};"
          }
        },
        "Description": "Lambda function for Creating a Snapshot on S3 SnapshotRepo for Amazon Elasticsearch.",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [ "SnapshotCreateLambdaRole", "Arn" ]
        },
        "Runtime": "nodejs6.10",
        "Timeout": "300"
      }
    },
    "SnapshotCreateScheduledRule": {
      "Type": "AWS::Events::Rule",
      "Condition": "cEnableES",
      "Properties": {
        "Description": "ScheduledRule",
        "ScheduleExpression": "rate(1 day)",
        "State": "ENABLED",
        "Targets": [{
          "Arn": { "Fn::GetAtt": ["SnapshotCreateLambda", "Arn"] },
          "Id": "TargetFunctionV1"
        }]
      }
    },
    "PermissionForEventsToInvokeSnapshotCreateLambda": {
      "Type": "AWS::Lambda::Permission",
      "Condition": "cEnableES",
      "Properties": {
        "FunctionName": { "Ref": "SnapshotCreateLambda" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["SnapshotCreateScheduledRule", "Arn"] }
      }
    }    
  },
  "Outputs": {
    "ServiceRoleName": {
      "Value": {
        "Ref": "CodeDeployTrustRole"
      }
    },
    "ServiceRoleARN": {
      "Value": {
        "Fn::GetAtt": [
          "CodeDeployTrustRole",
          "Arn"
        ]
      }
    },
    "AutoScalingGroupName": {
      "Value": {
        "Ref": "AutoScalingGroup"
      }
    },
    "URL": {
      "Description": "The URL of the website",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            {
              "Fn::GetAtt": [
                "ApplicationLoadBalancer",
                "DNSName"
              ]
            }
          ]
        ]
      }
    },
    "RepoURL": {
      "Description": "Git Repository URL",
      "Value": {
        "Fn::GetAtt": "CodeRepo.CloneUrlSsh"
      }
    },
    "LoadBalancerName": {
      "Value": {
        "Ref": "ApplicationLoadBalancer"
      }
    },
    "KibanaURL": {
      "Description": "URL of the Kibana dashboard",
      "Value": {
        "Fn::Sub": "https://${ElasticsearchAWSLogs.DomainEndpoint}/_plugin/kibana/app/kibana#/dashboard/Main-dashboard?_g=(refreshInterval:(display:%271%20minute%27,value:60000),time:(from:now-24h,to:now))"
      },
      "Condition": "cEnableES"
    }
  }
}
