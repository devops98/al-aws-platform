{
  "Description": "Automation Logic Cloud Platform",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
        "ParameterGroups": [
            {
                "Label": {
                    "default": "Domain Name:"
                }, 
                "Parameters": [
                    "HostedZoneID"
                ]
            },
            {
                "Label": {
                    "default": "Environment Type:"
                }, 
                "Parameters": [
                    "EnvironmentType"
                ]
            }, 
            {
                "Label": {
                    "default": "Database Configuration:"
                }, 
                "Parameters": [
                    "DBName", 
                    "DBUsername", 
                    "DBPassword", 
                    "DBInstanceClass", 
                    "DBAllocatedStorage"
                ]
            }, 
            {
                "Label": {
                    "default": "Auto-Scaling Web Server Group's Instance Configuration: "
                }, 
                "Parameters": [
                    "InstanceType", 
                    "InstanceCount",
                    "InstanceMaxCount",
                    "InstanceMinCount"
                ]
            },
            {
                "Label": {
                    "default": "Security: "
                }, 
                "Parameters": [                        
                    "KeyPairName",
                    "SSHLocation"                        
                ]
            },
            {
                "Label": {
                    "default": "Notification: "
                }, 
                "Parameters": [                        
                    "OperatorEMail"                                          
                ]
            },
            {
                "Label": {
                    "default": "Tags: "
                }, 
                "Parameters": [                        
                    "TagKey",
                    "TagValue"                                                                  
                ]
            }                          
            
        ], 
        "ParameterLabels": {
            "DBName": {
                "default": "Database Name"
            }, 
            "DBUsername": {
                "default": "Database User Name"
            }, 
            "DBPassword": {
                "default": "Database Password"
            }, 
            "DBInstanceClass": {
                "default": "Database Instance Class"
            }, 
            "DBAllocatedStorage": {
                "default": "Database Storage"
            },
            "HostedZoneID" : {
                "default": "Hosted Zone ID"
            }
        }
    }
  }, 
  "Parameters": {
    "OperatorEMail": {
        "Description": "EMail address to notify if there are any scaling operations",
        "Type": "String",
        "Default": "xavier.thomas@automationlogic.com",
        "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
        "ConstraintDescription": "must be a valid email address."
    },
    "TagKey": {
      "Description": "The EC2 tag key that identifies this as a target for deployments.",
      "Type": "String",
	    "Default": "Name",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "TagValue": {
      "Description": "The EC2 tag value that identifies this as a target for deployments.",
      "Type": "String",
	    "Default": "AL Cloud Platform",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "Can contain only ASCII characters."
    },
    "EnvironmentType": {
      "Description": "Environment Type",
      "Type": "String",
      "Default": "Prod",
      "AllowedValues" : [ "Prod","Stage","Test"],
      "ConstraintDescription": "must be a valid Environment type."
    },
    "HostedZoneID" :{
      "Description": "Name of an existing Amazon Route53 HostedZone ID. Defaults to al-labs.co.uk.",
      "Type": "AWS::Route53::HostedZone::Id",   
      "MinLength": "1",
      "MaxLength": "32",
      "Default" : "Z2KFA2A6JE8TAK"  
    }, 
    "KeyPairName": {
      "Description": "Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the instances.",
      "Type": "AWS::EC2::KeyPair::KeyName",   
      "MinLength": "1",
      "MaxLength": "255",
      "Default" : "xavierkey",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "KeyPairName is a required Field and can contain only ASCII characters."
    },
    "InstanceType": {
      "Description": "WebServer EC2 Spot Priced Instance type",
      "Type": "String",
      "Default": "c3.large",
      "AllowedValues" : [ "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge",
        "c4.large", "c4.xlarge", "c4.2xlarge","g2.2xlarge", "r3.large", "r4.large", "i3.large"],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "InstanceCount": {
      "Description": "Number of Amazon EC2 instances to Launch. (Must be a number between 1 and 3).",
      "Type": "Number",
      "Default": "3",
      "ConstraintDescription": "Must be a number between 1 and 3.",
      "MinValue": "1",
      "MaxValue": "3"
    },
    "InstanceMaxCount":{
        "Description":"Maximum Number of Amazon EC2 instances in an autoscaling group. (Must be a number between 3 and 5)",
        "Type":"Number",
        "Default":"5",
        "ConstraintDescription":"Must be a number between 1 and 5.",
        "MinValue":"3",
        "MaxValue":"5"
    },
    "InstanceMinCount":{
        "Description":"Minimum Number of Amazon EC2 instances in an autoscaling group. (Must be a number between 1 and 3).",
        "Type":"Number",
        "Default":"0",
        "ConstraintDescription":"Must be a number between 0 and 3.",
        "MinValue":"0",
        "MaxValue":"3"
    },   
    "SSHLocation": {
      "Description": "The IP address range that can be used to connect using SSH or RDP to the Amazon EC2 instances.",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "DBName": {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*", 
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.", 
      "Default": "todo", 
      "Description": "The database name", 
      "MaxLength": "64", 
      "MinLength": "1", 
      "Type": "String"
    }, 
    "DBUsername"    : {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*", 
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters.", 
      "Default": "admin", 
      "Description": "The database admin account username", 
      "MaxLength": "16", 
      "MinLength": "1", 
      "NoEcho": "true", 
      "Type": "String"
    },
    "DBPassword": {
      "AllowedPattern": "[a-zA-Z0-9]*", 
      "ConstraintDescription": "must contain only alphanumeric characters.", 
      "Default": "password", 
      "Description": "The database admin account password", 
      "MaxLength": "41", 
      "MinLength": "8", 
      "NoEcho": "true", 
      "Type": "String"
    },    
    "DBInstanceClass"   : {
      "AllowedValues": [
          "db.m1.small", 
          "db.m1.large"
      ], 
      "ConstraintDescription": "must select a valid database instance type.", 
      "Default": "db.m1.small", 
      "Description": "Database instance class", 
      "Type": "String"
    },
    "DBAllocatedStorage"  : {
      "ConstraintDescription": "must be between 5 and 1024Gb.", 
      "Default": "5", 
      "Description": "The size of the database (Gb)", 
      "MaxValue": "1024", 
      "MinValue": "5", 
      "Type": "Number"
    }
  },
  "Mappings":{
    "Region2AMI": {
      "us-east-1": {
        "Ubuntu":"ami-6edd3078"
        },
      "us-east-2":{
         "Ubuntu":"ami-fcc19b99"
        },
      "us-west-1":{
        "Ubuntu":"ami-539ac933"
        },
      "us-west-2":{
        "Ubuntu":"ami-7c803d1c"
        },
      "eu-west-1":{
        "Ubuntu":"ami-405f7226"
        },
      "eu-west-2":{
        "Ubuntu":"ami-ede2e889"
        },
      "eu-central-1":{
        "Ubuntu":"ami-5aee2235"
        },
      "ap-southeast-1":{
        "Ubuntu":"ami-b1943fd2"
        },
      "ap-southeast-2":{
        "Ubuntu":"ami-fe71759d"
        },
      "ap-northeast-1":{
        "Ubuntu":"ami-eb49358c"
        },
      "ap-northeast-2":{
        "Ubuntu":"ami-93d600fd,"
        },
      "ap-south-1":{
        "Ubuntu":"ami-dd3442b2"
        },
      "ca-central-1":{
        "Ubuntu":"ami-3d299b59"
        },
      "sa-east-1":{
        "Ubuntu":"ami-7379e31f"
        }
    }
  },
  "Resources":{
    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Metadata": {
        "Comment": "Wait condition to wait for instance to spin up and send signal."
      },          
      "Properties": {
        "Count": {
          "Ref": "InstanceCount"
        },
        "Handle": {
          "Ref": "WaitHandle"
        },
        "Timeout": "900"
      }
    },
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "OperatorEMail" }, "Protocol": "email" } ]
      }
    },       
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Metadata": {
        "Comment": "IAM Role for the Autoscaling web server group. Also Permits decryption of values encrypted under a KMS key without any restrictions."
      },        
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "Comment": "IAM Policy attached to Role for the Autoscaling web server group."
      }, 
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "ec2:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "rds:DescribeDBInstances",
                "s3:Get*"
              ],
              "Resource": "*"
            },
            {
                "Effect":"Allow",
                "Action":[
                    "ssm:GetParameters"                    
                ],
                "Resource":[
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.Prod.*"}                     
                ]
            },
            {
                "Effect":"Allow",
                "Action":[                    
                    "ssm:DescribeParameters"
                ],
                "Resource":[
                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"}                     
                ]
            }              
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Metadata": {
        "Comment": "Instance Profile used to attach the IAM Role with the Autoscaling web server group."
      },       
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "LambdaRole": {
        "Type": "AWS::IAM::Role",
        "Metadata": {
            "Comment": "LambdaRole permits encryption of values under a KMS key without any restrictions and allows write to S3 to store the value"
        },
        "Properties": {
            "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": 
                [{
                    "Effect": "Allow",
                    "Principal": { "Service": [ "lambda.amazonaws.com" ] },
                    "Action": [ "sts:AssumeRole"]                
                }]
            }
        }
    },
    "LambdaRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Metadata": {
        "Comment": "IAM Policy attached to Role for the Lambda. "
      }, 
      "Properties": {
        "PolicyName": "LambdaRole",
        "PolicyDocument": {
            "Statement":[
                {
                    "Effect":"Allow",
                    "Action": [
                        "logs:*"                        
                    ],
                    "Resource":"*"
                },
                {
                    "Effect":"Allow",
                    "Action":[
                        "ssm:PutParameter"
                    ],
                    "Resource":[
                        {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.Prod.*"}                     
                    ]
                }                 
            ]
        },
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },       
    "MyKey" : {
        "Type" : "AWS::KMS::Key",
        "Properties" : {
            "Description" : "A sample key",            
            "KeyPolicy" : {
                "Version": "2012-10-17",                
                "Statement": [
                    {
                    "Sid": "Allow administration of the key",
                    "Effect": "Allow",
                    "Principal": { "AWS": "arn:aws:iam::505076813643:user/xavier.thomas" },
                    "Action": [
                        "kms:Create*",
                        "kms:Describe*",
                        "kms:Enable*",
                        "kms:List*",
                        "kms:Put*",
                        "kms:Update*",
                        "kms:Revoke*",
                        "kms:Disable*",
                        "kms:Get*",
                        "kms:Delete*",
                        "kms:ScheduleKeyDeletion",
                        "kms:CancelKeyDeletion"
                    ],
                    "Resource": "*"
                    },
                    {
                    "Sid": "Allow use of the key",
                    "Effect": "Allow",
                    "Principal": { "AWS": "arn:aws:iam::505076813643:user/xavier.thomas" },
                    "Action": [
                        "kms:Encrypt",
                        "kms:Decrypt",
                        "kms:ReEncrypt*",
                        "kms:GenerateDataKey*",
                        "kms:DescribeKey"
                    ], 
                    "Resource": "*"
                    },
                    {
                    "Sid": "Allow decrypting of any value encrypted under this key.",
                    "Effect": "Allow",
                    "Principal": { "AWS": {"Fn::GetAtt": [ "InstanceRole","Arn" ] } },
                    "Action": [
                        "kms:Decrypt"
                    ],
                    "Resource": "*"
                    },
                    {
                    "Sid": "Allow encrypting under this key.",
                    "Effect": "Allow",
                    "Principal": { "AWS": {"Fn::GetAtt": [ "LambdaRole","Arn" ] } },
                    "Action": [
                        "kms:Encrypt",
                        "kms:GenerateDataKey"
                    ],
                    "Resource": "*"
                    },
                    {
                    "Sid": "Allow use of the key",
                    "Effect": "Allow",
                    "Principal": { "AWS": "arn:aws:iam::505076813643:user/devuser" },
                    "Action": [
                        "kms:Encrypt",
                        "kms:Decrypt",
                        "kms:GenerateDataKey"                                                
                    ], 
                    "Resource": "*"
                    },
                    {
                    "Sid": "Allow use of the key",
                    "Effect": "Allow",
                    "Principal": { "AWS": "arn:aws:iam::505076813643:user/qauser" },
                    "Action": [                        
                        "kms:Decrypt"                        
                    ], 
                    "Resource": "*"
                    }                                
                ]
            }
        }
    },
    "MyKeyAlias" : {
        "Type" : "AWS::KMS::Alias",
        "Properties" : {
            "AliasName" : { "Fn::Sub": "alias/${AWS::StackName}-masterkey" },
            "TargetKeyId" : {"Ref":"MyKey"}
        }
    },    
    "ParameterStoreLambda" : {
        "Type": "AWS::Lambda::Function",
        "Properties": {
            "Handler": "index.lambda_handler",
            "Role": { "Fn::GetAtt" : ["LambdaRole", "Arn"] },
            "Code": {
                "ZipFile": { "Fn::Join": ["\n", [
                "var AWS = require('aws-sdk');",
                "var response = require('cfn-response');",
                "exports.lambda_handler = function (event, context) {",
                    "try {",
                        "var ssm = new AWS.SSM();",
                        "if(event.RequestType == 'Delete') {",
                            "response.send(event, context, response.SUCCESS);",
                        "}",
                        "var params = {",
                            "Name: event.ResourceProperties.Name,",
                            "Type: 'SecureString',",
                            "Value: event.ResourceProperties.Value,",                            
                            "KeyId: event.ResourceProperties.KeyId,",
                            "Overwrite: true",
                        "};",
                        "ssm.putParameter(params, function(err, data) {",
                            "if (err){",
                                "console.log(err, err.stack); // an error occurred",
                                "response.send(event, context, response.FAILED);",
                            "}",
                            "else{",
                                "console.log(data);           // successful response",
                                "response.send(event, context, response.SUCCESS);",
                            "}",
                        "});",
                    "}",
                    "catch (err) {",
                        "console.log('General Error.');",
                        "console.log(err);",
                        "response.send(event, context, response.FAILED);",
                    "}",
                "};"
                ]]}
            },
            "Runtime": "nodejs4.3",
            "Timeout": "25"
        }
    },  
    "VPC":{
        "Type":"AWS::EC2::VPC",
        "Metadata": {
            "Comment": "Virtual Private Cloud for the Application."
        },    
        "Properties":{
        "CidrBlock":"10.0.0.0/16",
        "EnableDnsSupport":true,
        "EnableDnsHostnames":true,
        "InstanceTenancy":"default",
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                    "Ref":"AWS::StackName"
                }
            }
        ]
        }
    },
    "InternetGateway":{
      "Type":"AWS::EC2::InternetGateway",
      "Metadata": {
        "Comment": "Internet gateway for the VPC."
      },            
      "Properties":{
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                    "Ref":"AWS::StackName"
                }
            }
        ]
      }
    },
    "AttachGateway":{
        "Type":"AWS::EC2::VPCGatewayAttachment",
        "Properties":{
        "VpcId":{
            "Ref":"VPC"
        },
        "InternetGatewayId":{
            "Ref":"InternetGateway"
        }
        }
    },
    "PublicSubnet01":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
        "VpcId":{
            "Ref":"VPC"
        },
        "CidrBlock":"10.0.1.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]},
        "MapPublicIpOnLaunch":"true",
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                  "Fn::Join":[                                        
                    "",
                    [
                      { "Ref" : "AWS::StackName" }, "- PublicSubnet01"
                    ]
                  ]
                }
            }
        ]
        }
    },
    "PublicSubnet02":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
        "VpcId":{
            "Ref":"VPC"
        },
        "CidrBlock":"10.0.2.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]},
        "MapPublicIpOnLaunch":"true",
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                  "Fn::Join":[                                        
                    "",
                    [
                      { "Ref" : "AWS::StackName" }, "- PublicSubnet02"
                    ]
                  ]
                }
            }
        ]
        }
    },
    "PrivateSubnet01":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
        "VpcId":{
            "Ref":"VPC"
        },
        "CidrBlock":"10.0.3.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" }]},
        "MapPublicIpOnLaunch":"true",
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                  "Fn::Join":[
                    "",
                    [
                      { "Ref" : "AWS::StackName" }, "- PrivateSubnet01"
                    ]
                  ]
                }
            }
        ]
        }
    },
    "PrivateSubnet02":{
        "Type":"AWS::EC2::Subnet",
        "Properties":{
        "VpcId":{
            "Ref":"VPC"
        },
        "CidrBlock":"10.0.4.0/24",
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" }]},
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                  "Fn::Join":[
                    "",
                    [
                      { "Ref" : "AWS::StackName" }, "- PrivateSubnet02"
                    ]
                  ]
                }
            }
        ]
        }
    },    
    "PublicRouteTable":{
        "Type":"AWS::EC2::RouteTable",
        "Properties":{
        "VpcId":{
            "Ref":"VPC"
        },
        "Tags":[
            {
                "Key":"Name",
                "Value":{
                    "Ref":"AWS::StackName"
                }
            }
        ]
        }
    },
    "PublicRoute":{
        "Type":"AWS::EC2::Route",
        "Properties":{
        "RouteTableId":{
            "Ref":"PublicRouteTable"
        },
        "DestinationCidrBlock":"0.0.0.0/0",
        "GatewayId":{
            "Ref":"InternetGateway"
        }
        }
    },
    "PublicSubnet01RouteTableAssociation":{
        "Type":"AWS::EC2::SubnetRouteTableAssociation",
        "DependsOn": [
            "PublicRouteTable", 
            "PublicSubnet01"
        ],
        "Properties":{
        "RouteTableId":{
            "Ref":"PublicRouteTable"
        },
        "SubnetId":{
            "Ref":"PublicSubnet01"
        }
        }
    },
    "PublicSubnet02RouteTableAssociation":{
        "Type":"AWS::EC2::SubnetRouteTableAssociation",
        "DependsOn": [
            "PublicRouteTable", 
            "PublicSubnet02"
        ],        
        "Properties":{
        "RouteTableId":{
            "Ref":"PublicRouteTable"
        },
        "SubnetId":{
            "Ref":"PublicSubnet02"
        }
        }
    },
    "DBSubnetGroup": {
        "Type": "AWS::RDS::DBSubnetGroup",
        "DependsOn": [
            "PrivateSubnet01", 
            "PrivateSubnet02"
        ], 
        "Properties": {
            "DBSubnetGroupDescription": "RDS Subnet Group", 
            "SubnetIds": [
                {
                    "Ref": "PrivateSubnet01"
                },
                {
                    "Ref": "PrivateSubnet02"
                }                
            ]
        }
    },             
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP and HTTPS ports for the Load Balancer",
        "VpcId":{
            "Ref":"VPC"
        },        
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable HTTP access via port 3000 and SSH access via port 22 for the EC2 Instances",
        "VpcId":{
            "Ref":"VPC"
        },        
        "SecurityGroupIngress": [         
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "3000",
            "ToPort": "3000",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "SSLCertificate" : {
        "Type" : "AWS::CertificateManager::Certificate",
        "DeletionPolicy" : "Retain",
        "Properties" : {
            "DomainName" : "al-labs.co.uk"
        }
    },        
    "ApplicationLoadBalancer":{
      "Type":"AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties":{     
        "Name":{
            "Fn::Sub": "${AWS::StackName}-loadbalancer"
        },
        "Scheme" : "internet-facing",
        "Subnets":[
            {
                "Ref":"PublicSubnet01"
            },
            {
                "Ref":"PublicSubnet02"
            }
        ],
        "SecurityGroups":[
            {
                "Ref":"SecurityGroup"
            }
        ]
      }
    },
    "ApplicationLoadBalancerTargetGroup": {        
        "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
        "Properties" : {
            "Name":{
                "Fn::Sub": "${AWS::StackName}-targetgroup"
            },
            "HealthCheckPath" : "/",
            "HealthCheckIntervalSeconds": 30,
            "HealthCheckProtocol": "HTTP",
            "HealthCheckTimeoutSeconds": 10,
            "HealthyThresholdCount": 2,
            "UnhealthyThresholdCount": 5,
            "Matcher" : {
                "HttpCode" : "200"
            },            
            "Port": 3000,
            "Protocol": "HTTP",
            "TargetGroupAttributes": [{
                "Key": "deregistration_delay.timeout_seconds",
                "Value": "300"
            }],
            "VpcId": {"Ref" : "VPC"}
        }
    },    
    "ApplicationLoadBalancerHTTPListener" :{
        "Type":"AWS::ElasticLoadBalancingV2::Listener",
        "Properties": {
            "DefaultActions": [{
                "Type": "forward",
                "TargetGroupArn": { "Ref": "ApplicationLoadBalancerTargetGroup" }
            }],
            "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
            "Port": "80",
            "Protocol": "HTTP"
        }
    },
    "ApplicationLoadBalancerHTTPSListener" :{
        "Type":"AWS::ElasticLoadBalancingV2::Listener",        
        "Properties": {
            "Certificates":[
                {
                    "CertificateArn" : {"Ref":"SSLCertificate"}
                }
            ],    
            "DefaultActions": [{
                "Type": "forward",
                "TargetGroupArn": { "Ref": "ApplicationLoadBalancerTargetGroup" }
            }],
            "LoadBalancerArn": { "Ref": "ApplicationLoadBalancer" },
            "Port": "443",
            "Protocol": "HTTPS"
        }
    },      
    "DNSRecordSet" : {
        "Type" : "AWS::Route53::RecordSetGroup",
        "Properties" : {
          "HostedZoneName" : "al-labs.co.uk.",
          "Comment" : "Zone apex alias targeted to  LoadBalancer.",
          "RecordSets" : [
            {
              "Name" : "al-labs.co.uk.",
              "Type" : "A",
              "AliasTarget" : {
                  "HostedZoneId" : { "Fn::GetAtt" : ["ApplicationLoadBalancer", "CanonicalHostedZoneID"] },
                  "DNSName" : { "Fn::GetAtt" : ["ApplicationLoadBalancer","DNSName"] }
              }
            }
          ]
        }
    },  
    "LaunchConfig":{        
        "Type":"AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
            "Comment" : "Install a simple application and decrypt secrets and set as environment variable.",
            "AWS::CloudFormation::Init" : {
                "config" : {
                    "packages" : {
                        "apt" : {
                            "mysql-client" : []
                        }
                    }
                }
            }
        },
        "Properties":{
            "IamInstanceProfile":{
                "Ref":"InstanceRoleInstanceProfile"
            },
            "SpotPrice":"0.05",            
            "ImageId": {
            "Fn::FindInMap": [
                "Region2AMI",
                {
                "Ref": "AWS::Region"
                },
                "Ubuntu"            
            ]
            },
            "InstanceType": {
            "Ref": "InstanceType"
            },
            "KeyName":{
                "Ref":"KeyPairName"
            },
            "SecurityGroups":[
                {
                    "Ref":"InstanceSecurityGroup"
                }
            ],
            "UserData":{
                "Fn::Base64":{
                    "Fn::Join":[
                        "",
                        [
                        "#!/bin/bash -ex\n",
                        "# Install CFN Bootstrap\n",
                        "sudo apt-get -y update\n",                        
                        "sudo apt-get -y install ruby\n",
                        "sudo apt-get -y install wget\n",
                        "sudo apt-get -y install python-pip\n",                        
                        "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",                
                        "# Helper function.\n",
                        "function error_exit\n",
                        "{\n",
                        "  cfn-signal -e 1 -r \"$1\" '",
                        {
                        "Ref": "WaitHandle"
                        },
                        "'\n",
                        "  exit 1\n",
                        "}\n",                                                
                        "# Install the AWS CodeDeploy Agent.\n",
                        "cd /home/ubuntu/\n",
                        "wget https://aws-codedeploy-us-west-1.s3.amazonaws.com/latest/install || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                        "chmod +x ./install || error_exit 'Failed to download AWS CodeDeploy Agent.'\n",
                        "sudo ./install auto || error_exit 'Failed to install AWS CodeDeploy Agent.' \n",                        
                        "# Install the latest AWS CLI. \n",
                        "sudo pip install --upgrade awscli \n",
                        "# Configure the AWS CLI to use the Curent Region by Default \n",
                        "aws configure set region ",{ "Ref" : "AWS::Region" }, "\n",                                                
                        "#Download and install the latest NodeJs version \n",
                        "# https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions \n",
                        "curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash - \n",
                        "apt-get install -y nodejs \n",
                        "# Call CFN-INIT to process the metadata for CloudFormation Init. Since ubuntu does not have the tools installed, we install the CFN Bootstrap in the previous step.\n",                        
                        "cfn-init -v ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource LaunchConfig ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n",
                        "# All is well, so signal success.\n",
                        "cfn-signal -e 0 -r \"AWS CodeDeploy Agent setup complete.\" '",
                        {
                            "Ref":"WaitHandle"
                        },
                        "'\n",
                        "# Send a Signal for creation policy to work.\n",
                        "cfn-signal -e $? ",
                        "         --stack ", { "Ref" : "AWS::StackName" },
                        "         --resource AutoScalingGroup ",
                        "         --region ", { "Ref" : "AWS::Region" }, "\n"
                        ]
                    ]
                }
            }            
        }
    },
    "AutoScalingGroup":{
        "Type":"AWS::AutoScaling::AutoScalingGroup",
        "Properties":{            
            "LaunchConfigurationName":{ "Ref":"LaunchConfig" },
            "TargetGroupARNs" : [{"Ref":"ApplicationLoadBalancerTargetGroup"}],
            "MaxSize":{ "Ref":"InstanceCount" },
            "MinSize":{ "Ref":"InstanceCount" },                  
            "MetricsCollection" : [
                {
                    "Granularity":"1Minute"
                }
            ],
            "VPCZoneIdentifier":[ { "Ref":"PublicSubnet01" },{ "Ref":"PublicSubnet02" } ],
            "NotificationConfiguration" : {
              "TopicARN" : { "Ref" : "NotificationTopic" },
              "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                "autoscaling:EC2_INSTANCE_TERMINATE",
                "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
            },
            "Tags": [
            {
                "Key": { "Ref": "TagKey" },
                "Value": { "Ref": "TagValue" },
                "PropagateAtLaunch":"true"
            },
            {
                "Key": "Environment",
                "Value": { "Ref": "EnvironmentType" },
                "PropagateAtLaunch":"true"
            }
            ]            
          },
          "CreationPolicy" : {
            "ResourceSignal" : {
              "Timeout" : "PT15M",
              "Count"   : "1"
            }
          },
          "UpdatePolicy": {
            "AutoScalingRollingUpdate": {
              "MinInstancesInService": "1",
              "MaxBatchSize": "1",
              "PauseTime" : "PT15M",
              "WaitOnResourceSignals": "true"
            }
          }  
    },
    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },
    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },
    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },    
    "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "DependsOn": [
            "AutoScalingGroup"            
        ],
      "Properties": {
        "DBName"            : { "Ref" : "DBName" },
        "Engine"            : "MySQL",
        "MasterUsername"    : { "Ref" : "DBUsername" },
        "DBInstanceClass"   : { "Ref" : "DBInstanceClass" },
        "DBSecurityGroups"  : [{ "Ref" : "DBSecurityGroup" }],
        "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
        "MasterUserPassword": { "Ref" : "DBPassword" },
        "DBSubnetGroupName": {  "Ref" : "DBSubnetGroup" }
      }
    },
    "EncryptDBUSERNAME": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn" : [          
          "MyKey",
          "MyKeyAlias",
          "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": [ "ParameterStoreLambda","Arn" ] },
        "Name": {
            "Fn::Join":[ ".",
                [                                       
                    {"Ref":"AWS::StackName"},                                      
                    {"Ref":"EnvironmentType"},
                    "db",
                    "username"          
                ]
            ]
        },
        "Value": {"Ref":"DBUsername"},
        "KeyId": {"Ref": "MyKey"}
      }
    }, 
    "EncryptDBPassword": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn" : [          
          "MyKey",
          "MyKeyAlias",
          "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": [ "ParameterStoreLambda","Arn" ] },
        "Name": {
            "Fn::Join":[ ".",
                [                                       
                    {"Ref":"AWS::StackName"},                                      
                    {"Ref":"EnvironmentType"},
                    "db",
                    "password"                  
                ]
            ]
        },
        "Value": {"Ref":"DBPassword"},
        "KeyId": {"Ref": "MyKey"}
      }
    }, 
    "EncryptDBName": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn" : [          
          "MyKey",
          "MyKeyAlias",
          "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": [ "ParameterStoreLambda","Arn" ] },
        "Name": {
            "Fn::Join":[ ".",
                [                                       
                    {"Ref":"AWS::StackName"},                                      
                    {"Ref":"EnvironmentType"},
                    "db",
                    "name"
                ]
            ]
        },
        "Value": {"Ref":"DBName"},
        "KeyId": {"Ref": "MyKey"}
      }
    }, 
    "EncryptDBCONNECTIONSTRING": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Version": "1.0",
      "DependsOn" : [          
          "MyKey",
          "MyKeyAlias",
          "DBInstance"
      ],
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": [ "ParameterStoreLambda","Arn" ] },
        "Name": {
            "Fn::Join":[ ".",
                [                                       
                    {"Ref":"AWS::StackName"},                                      
                    {"Ref":"EnvironmentType"},
                    "db",
                    "connectionstring"                    
                ]
            ]
        },
        "Value": {"Fn::GetAtt": [ "DBInstance","Endpoint.Address" ] },
        "KeyId": {"Ref": "MyKey"}
      }
    }, 
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "DependsOn": [
          "InstanceSecurityGroup", 
          "VPC"
      ],            
      "Properties": {
        "EC2VpcId": { "Ref": "VPC" }, 
        "DBSecurityGroupIngress": [{"EC2SecurityGroupId": {"Ref": "InstanceSecurityGroup"}}],
        "GroupDescription" : "Frontend Access"
      }
    },
    "QAGroup": {
      "Type": "AWS::IAM::Group", 
      "Properties": {
          "GroupName": {
              "Fn::Sub": "${AWS::StackName}-QA"
          }, 
          "ManagedPolicyArns": [
              "arn:aws:iam::aws:policy/IAMReadOnlyAccess", 
              "arn:aws:iam::aws:policy/IAMUserSSHKeys"
          ], 
          "Policies": [
              {
                  "PolicyName": {"Fn::Sub": "${AWS::StackName}-QA-Policy"}, 
                  "PolicyDocument": {
                      "Version": "2012-10-17", 
                      "Statement": [
                          {
                              "Effect": "Allow", 
                              "Action": [
                                  "codecommit:BatchGetRepositories", 
                                  "codecommit:List*"
                              ], 
                              "Resource": "*"
                          }, 
                          {
                              "Effect": "Allow", 
                              "Action": [
                                  "codecommit:Get*", 
                                  "codecommit:GitPull"
                              ], 
                              "Resource": [
                                  {
                                      "Fn::Sub": "arn:aws:codecommit:eu-west-1:${AWS::AccountId}:${AWS::StackName}-application"
                                  }
                              ]
                          },
                          {
                              "Effect":"Allow",
                              "Action":[
                                  "ssm:GetParameters"                    
                              ],
                              "Resource":[
                                  {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.Prod.*"}                     
                              ]
                          },
                          {
                              "Effect":"Allow",
                              "Action":[                    
                                  "ssm:DescribeParameters"
                              ],
                              "Resource":[
                                  {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"}                     
                              ]
                          } 
                      ]
                  }
              }
          ]
      }
    }, 
    "DevGroup": {
        "Type": "AWS::IAM::Group", 
        "Properties": {
            "GroupName": {
                "Fn::Sub": "${AWS::StackName}-Dev"
            }, 
            "ManagedPolicyArns": [
                "arn:aws:iam::aws:policy/IAMReadOnlyAccess", 
                "arn:aws:iam::aws:policy/IAMUserSSHKeys"
            ], 
            "Policies": [
                {
                    "PolicyName": {"Fn::Sub": "${AWS::StackName}_dev_policy"}, 
                    "PolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "codecommit:BatchGetRepositories", 
                                    "codecommit:List*"
                                ], 
                                "Resource": "*"
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "codecommit:Get*", 
                                    "codecommit:GitPull", 
                                    "codecommit:GitPush"
                                ], 
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:codecommit:eu-west-1:${AWS::AccountId}:${AWS::StackName}-application"
                                    }
                                ]
                            },
                            {
                                "Effect":"Allow",
                                "Action":[
                                    "ssm:PutParameter"                    
                                ],
                                "Resource":[
                                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.Prod.*"}                     
                                ]
                            },
                            {
                                "Effect":"Allow",
                                "Action":[
                                    "ssm:GetParameters"                    
                                ],
                                "Resource":[
                                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}.Prod.*"}                     
                                ]
                            },
                            {
                                "Effect":"Allow",
                                "Action":[                    
                                    "ssm:DescribeParameters"
                                ],
                                "Resource":[
                                    {"Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"}                     
                                ]
                            }                             
                        ]
                    }
                }
            ]
        }
    },
    "AddUsersToDevGroup" : {
        "Type": "AWS::IAM::UserToGroupAddition",
        "Properties": {
            "GroupName": {"Ref":"DevGroup"},
            "Users": [ "devuser" ]
        }
    },
    "AddUsersToQAGroup" : {
        "Type": "AWS::IAM::UserToGroupAddition",
        "Properties": {
            "GroupName": {"Ref":"QAGroup"},
            "Users": [ "qauser" ]
        }
    },
    "CodeRepo": {
        "Type": "AWS::CodeCommit::Repository", 
        "Properties": {
            "RepositoryName": {
                "Fn::Sub": "${AWS::StackName}-application"
            }, 
            "RepositoryDescription": "A code repository for the application"
        }
    }, 
    "CodeBuildRole": {
        "Type": "AWS::IAM::Role", 
        "Properties": {
            "RoleName": {
                "Fn::Sub": "${AWS::StackName}-CodeBuild"
            }, 
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17", 
                "Statement": [
                    {
                        "Effect": "Allow", 
                        "Principal": {
                            "Service": [
                                "codebuild.amazonaws.com"
                            ]
                        }, 
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            }, 
            "Policies": [
                {
                    "PolicyName": "codebuild", 
                    "PolicyDocument": {
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "ecr:GetAuthorizationToken"
                                ], 
                                "Resource": "*"
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "ecr:BatchCheckLayerAvailability", 
                                    "ecr:CompleteLayerUpload", 
                                    "ecr:InitiateLayerUpload", 
                                    "ecr:PutImage", 
                                    "ecr:UploadLayerPart"
                                ], 
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-application"
                                    }
                                ]
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "codecommit:GitPull"
                                ], 
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-application"
                                    }
                                ]
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "logs:CreateLogGroup", 
                                    "logs:CreateLogStream", 
                                    "logs:PutLogEvents"
                                ], 
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application:log-stream"
                                    }, 
                                    {
                                        "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application:log-stream:*"
                                    }, 
                                    {
                                        "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application-image:log-stream"
                                    }, 
                                    {
                                        "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-application-image:log-stream:*"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    }, 
    "CodeBuild": {
        "Type": "AWS::CodeBuild::Project", 
        "DependsOn": [
            "CodeRepo", 
            "CodeBuildRole"
        ], 
        "Properties": {
            "Name": {
                "Fn::Sub": "${AWS::StackName}-application"
            }, 
            "Description": "A description about my project", 
            "ServiceRole": {
                "Fn::GetAtt": "CodeBuildRole.Arn"
            }, 
            "Artifacts": {
                "Type": "CODEPIPELINE"
            }, 
            "Environment": {
                "Type": "LINUX_CONTAINER", 
                "ComputeType": "BUILD_GENERAL1_SMALL", 
                "Image": "aws/codebuild/nodejs:7.0.0"
            }, 
            "Source": {
                "Location": {
                    "Fn::GetAtt": "CodeRepo.CloneUrlHttp"
                }, 
                "Type": "CODEPIPELINE", 
                "BuildSpec": {
                    "Fn::Sub": "version: 0.1\nphases:\n  build:\n    commands:\n      - echo Install NodeJS dependencies...\n      - npm install\nartifacts:\n  files:\n  - \"**/*\" # All files recursively\n"
                }
            }, 
            "TimeoutInMinutes": 300
        }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {

            "Version":"2012-10-17",            
            "Statement": [
                {
                    "Sid": "1",
                    "Effect": "Allow",
                    "Principal": {
                        "Service":"codedeploy.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                }
            ]
        },
        "Path": "/",
        "RoleName":{
            "Fn::Sub": "${AWS::StackName}-CodeDeployRole"
        }
      }
    },
    "CodeDeployRolePolicies":{
        "Type":"AWS::IAM::Policy",
        "Properties":{
        "PolicyName":"CodeDeployPolicy",
        "PolicyDocument":{
            "Statement":[
                {
                    "Effect":"Allow",
                    "Resource":[
                    "*"
                    ],
                    "Action":[
                    "ec2:Describe*",
                    "ec2:TerminateInstances"
                    ]
                },
                {
                    "Effect":"Allow",
                    "Resource":[
                    "*"
                    ],
                    "Action":[
                    "autoscaling:*"
                    ]
                },
                {
                    "Effect":"Allow",
                    "Resource":[
                    "*"
                    ],
                    "Action":[
                    "elasticloadbalancing:DescribeLoadBalancers",
                    "elasticloadbalancing:DescribeInstanceHealth",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                    ]
                },
                {
                    "Effect":"Allow",
                    "Resource":[
                    "*"
                    ],
                    "Action":[
                    "Tag:getResources",
                    "Tag:getTags",
                    "Tag:getTagsForResource",
                    "Tag:getTagsForResourceList"
                    ]
                }
            ]
        },
        "Roles":[
            {
                "Ref":"CodeDeployTrustRole"
            }
        ]
        }
    },     
    "CodeDeployApplication": {
        "Type": "AWS::CodeDeploy::Application"
    }, 
    "CodeDeployDeploymentGroup": {
        "Type": "AWS::CodeDeploy::DeploymentGroup", 
        "DependsOn": [
            "CodeDeployApplication", 
            "CodeDeployTrustRole",
            "AutoScalingGroup"
        ], 
        "Properties": {
            "ApplicationName": {
                "Ref": "CodeDeployApplication"
            }, 
            "DeploymentConfigName": "CodeDeployDefault.HalfAtATime", 
            "AutoScalingGroups": [{"Ref" :"AutoScalingGroup"}], 
            "ServiceRoleArn": {
                "Fn::GetAtt": "CodeDeployTrustRole.Arn"
            }
        }
    }, 
    "CodePipelineServiceRole": {
        "Type": "AWS::IAM::Role", 
        "Properties": {
            "RoleName": {
                "Fn::Sub": "${AWS::StackName}-CodePipelineServiceRole"
            }, 
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17", 
                "Statement": [
                    {
                        "Effect": "Allow", 
                        "Principal": {
                            "Service": [
                                "codepipeline.amazonaws.com"
                            ]
                        }, 
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            }, 
            "Policies": [
                {
                    "PolicyName": "root", 
                    "PolicyDocument": {
                        "Version": "2012-10-17", 
                        "Statement": [
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "codecommit:BatchGetRepositories", 
                                    "codecommit:Get*", 
                                    "codecommit:GitPull", 
                                    "codecommit:List*", 
                                    "codecommit:UploadArchive"
                                ], 
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}-application"
                                    }
                                ]
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "ecr:BatchGetImage"
                                ], 
                                "Resource": [
                                    {
                                        "Fn::Sub": "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${AWS::StackName}-application"
                                    }
                                ]
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "codebuild:StartBuild", 
                                    "codebuild:BatchGetBuilds", 
                                    "cloudformation:*", 
                                    "iam:PassRole"
                                ], 
                                "Resource": "*"
                            }, 
                            {
                                "Effect": "Allow", 
                                "Action": [
                                    "codedeploy:*"
                                ], 
                                "Resource": "*"
                            }
                        ]
                    }
                }
            ]
        }
    }, 
    "ArtifactStoreS3Location": {
        "Type": "AWS::S3::Bucket",
        "DeletionPolicy" : "Retain", 
        "Properties": {
            "BucketName": {
                "Fn::Sub": "${AWS::StackName}-artifacts"
            }
        }
    }, 
    "ArtifactStoreS3LocationPolicy": {
        "Type": "AWS::S3::BucketPolicy", 
        "Properties": {
            "Bucket": {
                "Ref": "ArtifactStoreS3Location"
            }, 
            "PolicyDocument": {
                "Statement": [
                    {
                        "Effect": "Allow", 
                        "Action": [
                            "s3:*"
                        ], 
                        "Resource": [
                            {
                                "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-artifacts"
                            }, 
                            {
                                "Fn::Sub": "arn:aws:s3:::${AWS::StackName}-artifacts/*"
                            }
                        ], 
                        "Principal": "*"
                    }
                ]
            }
        }
    }, 
    "CodePipeline": {
        "Type": "AWS::CodePipeline::Pipeline",
        "DependsOn": [
            "AutoScalingGroup",
            "DBInstance"
        ], 
        "Properties": {
            "Name": {
                "Fn::Sub": "${AWS::StackName}-application"
            }, 
            "RoleArn": {
                "Fn::GetAtt": "CodePipelineServiceRole.Arn"
            }, 
            "Stages": [
                {
                    "Name": "Source", 
                    "Actions": [
                        {
                            "Name": {"Fn::Sub": "${AWS::StackName}-Source"},
                            "ActionTypeId": {
                                "Category": "Source", 
                                "Owner": "AWS", 
                                "Version": 1, 
                                "Provider": "CodeCommit"
                            }, 
                            "OutputArtifacts": [
                                {
                                    "Name": {"Fn::Sub": "${AWS::StackName}-SourceOutput"}
                                }
                            ], 
                            "Configuration": {
                                "RepositoryName": {
                                    "Fn::GetAtt": "CodeRepo.Name"
                                }, 
                                "BranchName": "master"
                            }
                        }
                    ]
                }, 
                {
                    "Name": "Build", 
                    "Actions": [
                        {
                            "Name": {"Fn::Sub": "${AWS::StackName}-Build"},
                            "InputArtifacts": [
                                {
                                    "Name": {"Fn::Sub": "${AWS::StackName}-SourceOutput"}
                                }
                            ], 
                            "ActionTypeId": {
                                "Category": "Build", 
                                "Owner": "AWS", 
                                "Version": 1, 
                                "Provider": "CodeBuild"
                            }, 
                            "OutputArtifacts": [
                                {
                                    "Name": {"Fn::Sub": "${AWS::StackName}-Build"}
                                }
                            ], 
                            "Configuration": {
                                "ProjectName": {
                                    "Ref":"CodeBuild"
                                }
                            }
                        }
                    ]
                }, 
                {
                    "Name": "Deploy", 
                    "Actions": [
                        {
                            "Name": "BetaAction", 
                            "InputArtifacts": [
                                {
                                    "Name": {"Fn::Sub": "${AWS::StackName}-Build"}
                                }
                            ], 
                            "ActionTypeId": {
                                "Category": "Deploy", 
                                "Owner": "AWS", 
                                "Version": 1, 
                                "Provider": "CodeDeploy"
                            }, 
                            "Configuration": {
                                "ApplicationName": {
                                    "Ref": "CodeDeployApplication"
                                }, 
                                "DeploymentGroupName": {
                                    "Ref": "CodeDeployDeploymentGroup"
                                }
                            }
                        }
                    ]
                }
            ], 
            "ArtifactStore": {
                "Type": "S3", 
                "Location": {
                    "Ref": "ArtifactStoreS3Location"
                }
            }
        }
    }           
  },
  "Outputs":{
    "ServiceRoleName":{
        "Value":{
          "Ref":"CodeDeployTrustRole"
        }
    },
    "ServiceRoleARN":{
        "Value":{
          "Fn::GetAtt":[
              "CodeDeployTrustRole",
              "Arn"
          ]
        }
    },
    "AutoScalingGroupName":{
        "Value":{
          "Ref":"AutoScalingGroup"
        }
    },
    "URL" : {
      "Description" : "The URL of the website",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ApplicationLoadBalancer", "DNSName" ]}]]}
    },
    "RepoURL": {
        "Description": "Git Repository URL", 
        "Value": {
            "Fn::GetAtt": "CodeRepo.CloneUrlSsh"
        }
    },     
    "LoadBalancerName":{
        "Value":{
          "Ref":"ApplicationLoadBalancer"
        }
    }
  }
}