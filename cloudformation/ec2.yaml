# EC2AutoScalingGroup:
#   Type: AWS::AutoScaling::AutoScalingGroup
#   Properties:
#     VPCZoneIdentifier:
#       - Fn::GetAtt: 'Networking.Outputs.publicSubnet01ID'
#       - Fn::GetAtt: 'Networking.Outputs.publicSubnet02ID'
#     LaunchConfigurationName:
#       Ref: EC2LaunchConfig
#     MinSize:
#       Ref: 'InstanceMinCount'
#     MaxSize:
#       Ref: 'InstanceMaxCount'
#     DesiredCapacity:
#       Ref: 'InstanceCount'
#     TargetGroupARNs:
#       - Ref: EC2TG
#     MetricsCollection:
#       - Granularity: 1Minute
#         # No metrics specified, send all!
#         # http://docs.aws.amazon.com/AutoScaling/latest/APIReference/API_EnableMetricsCollection.html
#     Tags:
#       - Key: Name
#         Value:
#           Fn::Sub: '${AWS::StackName}-EC2'
#         PropagateAtLaunch: True
#   CreationPolicy:
#     ResourceSignal:
#       Timeout: PT15M
#   UpdatePolicy:
#     AutoScalingReplacingUpdate:
#       WillReplace: True
EC2LaunchConfig:
  Type: AWS::AutoScaling::LaunchConfiguration
  Metadata:
    AWS::CloudFormation::Init:
      config:
        services:
          sysvint:
            codedeploy-agent:
              enabled: true
              ensureRunning: true
        packages:
          apt:
            mysql-client: []
            unzip: []
            libwww-perl: []
            libdatetime-perl: []
        files:
          /tmp/cwlogs/logstreams.conf:
            content:
              Fn::Sub: |
                [general]
                state_file= /var/awslogs/agent-state
                [nodejs-serverlog]
                file = /tmp/server.log
                log_group_name =  ${LogGroupAppLog}
                log_stream_name = nodejs.serverlog-{instance_id}
                datetime_format = %d/%b/%Y:%H:%M:%S
                # [nodejs-errorlog]
                # file = /tmp/server.err
                # log_group_name =  ${!LogGroupAppErrorLog}
                # log_stream_name = nodejs.errorlog-{instance_id}
                # datetime_format = %d/%b/%Y:%H:%M:%S
                [cloud-init-outputlog]
                file = /var/log/cloud-init-output.log
                log_group_name =  ${LogGroupCloudInit}
                log_stream_name = cloudinit.outputlog-{instance_id}
                datetime_format = %d/%b/%Y:%H:%M:%S
                [system-log]
                file = /var/log/syslog
                log_group_name =  ${LogGroupSysLog}
                log_stream_name = syslog-{instance_id}
                datetime_format = %b %d %H:%M:%S
            mode: '000400'
            owner: root
            group: root
          /lib/systemd/system/awslogs.service:
            content: |
              [Unit]
              Description=The CloudWatch Logs agent
              After=network.target
              [Service]
              Restart=always
              TimeoutSec=infinity
              ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh
              [Install]
              WantedBy=multi-user.target
            mode: '000400'
            owner: root
            group: root
          /tmp/aws_monitoring.sh:
            content: |
              #!/usr/bin/env bash
              set -xu
              (crontab -l 2>/dev/null; echo '*/1 * * * * /home/ubuntu/aws-scripts-mon/mon-put-instance-data.pl --mem-util --disk-space-util --disk-path=/ --auto-scaling=only --from-cron') | crontab -
            mode: '000500'
            owner: root
            group: root
  Properties:
    ImageId:
      Fn::FindInMap:
        - AWSRegion2AMI
        - Ref: 'AWS::Region'
        - Ref: OperatingSystem
    SpotPrice:
      Fn::If:
        - cEnableSpotInstances
        - '0.05'
        - Ref: 'AWS::NoValue'
    InstanceType:
      Ref: InstanceType
    KeyName:
      Ref: KeyPairName
    SecurityGroups:
      - Ref: EC2SecurityGroup
    IamInstanceProfile:
      Ref: EC2InstanceRoleInstanceProfile
    UserData:
      'Fn::Base64':
        Fn::Sub: |
          #!/bin/bash -ex

          # We can "trap" errors and use cfn-signal to "stop" the deploy
          function error_exit
          {
            cfn-signal -e 1 --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}
            exit 1
          }

          trap 'error_exit' ERR

          # Update repo and get tool dependencies
          apt-get update
          apt-get install -y python-pip ruby

          # Intall CloudFormation tools....
          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          # AWS CLI Tools are used to get parameters from parameter store.
          pip install awscli
          aws configure set region ${AWS::Region}

          # Install the AWS CodeDeploy Agent.
          cd /home/ubuntu
          curl -O https://aws-codedeploy-${AWS::Region}.s3.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          # https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
          curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
          apt-get install -y nodejs

          # Call CFN-INIT to process the metadata for CloudFormation Init. Since ubuntu does not have the tools installed, we install the CFN Bootstrap in the previous step.\n,
          cfn-init -v --stack ${AWS::StackName} --resource EC2LaunchConfig --region ${AWS::Region}

          # Download and Install the Cloudwatch Logs agent.
          curl -O https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py
          python awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/cwlogs/logstreams.conf

          # Start the Cloudwatch logs agent service using the SYSTEMD Unit file created by cloudformation Init.
          systemctl enable awslogs.service
          systemctl start awslogs.service

          # Download and Install the CloudWatch monitoring Script \n,
          curl -O http://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip
          unzip CloudWatchMonitoringScripts-1.2.1.zip
          rm CloudWatchMonitoringScripts-1.2.1.zip
          cd /tmp/
          sudo ./aws_monitoring.sh
          rm ./aws_monitoring.sh

          # All is well, so signal AutoScalingGroup.
          $(which cfn-signal) -e 0 --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}
    InstanceMonitoring: True
