---
# Standalone elasticsearch cluster
AWSTemplateFormatVersion: '2010-09-09'
Description: Standalone ES cluster
# Elasticsearch
Parameters:
  ClusterSize:
    AllowedValues:
      - Tiny
      - Small
      - Medium
      - Large
    Default: Small
    Description: 'Amazon ES cluster size: small (2 data nodes), medium (4 data nodes), large (6 data nodes)'
    Type: String

  # TODO this shouldn't allow giving global access to cluster it also should be
  # locked down to instances in the VPC but that depends on network info.
  IPAccess:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: IP address range that can access Elasticsearch
    Default: 0.0.0.0/0
    MaxLength: '18'
    MinLength: '9'
    Type: String

Conditions:
  SizeLarge:
    !Equals [!Ref ClusterSize, Large]
  SizeMedium:
    !Equals [!Ref ClusterSize, Medium]
  SizeSmall:
    !Equals [!Ref ClusterSize, Small]
  SizeTiny:
    !Equals [!Ref ClusterSize, Tiny]

Mappings:
  MasterSizing:
    elasticsearch:
      Large: m3.medium.elasticsearch
      Medium: m3.medium.elasticsearch
      Small: t2.small.elasticsearch
      Tiny: t2.small.elasticsearch

  instanceCount:
    elasticsearch:
      Large: '10'
      Medium: '4'
      Small: '2'
      Tiny: '2'

  instanceSizing:
    elasticsearch:
      Large: r3.8xlarge.elasticsearch
      Medium: r3.2xlarge.elasticsearch
      Small: m3.large.elasticsearch
      Tiny: t2.medium.elasticsearch

Outputs:
  # Elasticsearch Outputs
  DomainEndpointES:
    Description: URL of domain endpoint - for lambda function
    Value: !Sub ${ElasticsearchAWSLogs.DomainEndpoint}
    Export:
      Name: !Sub ${AWS::StackName}-DomainEndpointES
  KibanaURL:
    Description: URL of the Kibana dashboard
    Value: !Sub https://${ElasticsearchAWSLogs.DomainEndpoint}/_plugin/kibana/

Resources:
  ElasticsearchAWSLogs:
    Properties:
      AccessPolicies:
        Statement:
          - Action: es:*
            Condition:
              IpAddress:
                aws:SourceIp: !Ref IPAccess
            Effect: Allow
            Principal:
              AWS: '*'
            Resource: '*'
        Version: '2012-10-17'
      AdvancedOptions:
        # Breaks lambda log posting :(
        rest.action.multi.allow_explicit_index: 'true'
      # Max length 28 chars
      DomainName: !Sub logs-${AWS::StackName}
      EBSOptions:
        Fn::If:
          - SizeTiny
          - EBSEnabled: true
            Iops: 0
            VolumeSize: 10
            VolumeType: gp2
          - Fn::If:
              - SizeSmall
              - EBSEnabled: true
                Iops: 0
                VolumeSize: 50
                VolumeType: gp2
              - Fn::If:
                  - SizeMedium
                  - EBSEnabled: false
                  - EBSEnabled: false
      ElasticsearchClusterConfig:
        DedicatedMasterCount: '3'
        DedicatedMasterEnabled: 'true'
        DedicatedMasterType:
          !FindInMap [MasterSizing, elasticsearch, !Ref ClusterSize]
        InstanceCount:
          !FindInMap [instanceCount, elasticsearch, !Ref ClusterSize]
        InstanceType:
          !FindInMap [instanceSizing, elasticsearch, !Ref ClusterSize]
        ZoneAwarenessEnabled: 'true'
      ElasticsearchVersion: '5.1'
      SnapshotOptions:
        AutomatedSnapshotStartHour: '1'
    Type: AWS::Elasticsearch::Domain
  ArtifactStoreS3Location:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-es-snapshots
  EncryptLambdaLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-es-snapshots
      RetentionInDays: 1
  ElasticsearchAWSLogsSnapshotFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ElasticsearchAWSLogsSnapshotFunction
      Principal: !Sub logs.${AWS::Region}.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
  ElasticsearchSnapshotRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: es.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-es-snapshots"
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - iam:PassRole
                Resource:
                  - !Sub "arn:aws:s3:::${AWS::StackName}-es-snapshots/*"
            Version: "2012-10-17"
          PolicyName: es-snapshots
      RoleName: !Sub ${AWS::StackName}-es-snapshots
  ElasticsearchAWSLogsSnapshotFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              # Allow lambda to create log group
              - Effect: "Allow"
                Action:
                  - logs:CreateLogGroup
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
              # Create Log streams and write on it
              - Effect: "Allow"
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-es-snapshots"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-es-snapshots:*"
             # Allow lambda to execute _snapshot actions
              - Effect: Allow
                Action:
                  - es:ESHttpGet
                  - es:ESHttpPost
                Resource:
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchAWSLogs}/_snapshot"
                  - !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ElasticsearchAWSLogs}/_snapshot/*"
             # Allow lambda to pass role to ES
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
                #   - !Sub "arn:aws:iam::${AWS::Region}:role/pm-es-test"
            Version: "2012-10-17"
          PolicyName: es-lambda-snapshots
      RoleName: !Sub ${AWS::StackName}-ES-snapshots-Lambda
  ElasticsearchAWSLogsSnapshotFunction:
    Type: AWS::Lambda::Function
    DependsOn: [ElasticsearchAWSLogs]
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          var response = require('cfn-response');

          exports.handler = (event, context) => {
              console.log(event)
              console.log(context)
              const region = process.env.AWS_REGION;
              const endpoint =  new AWS.Endpoint(event.ResourceProperties.ESDomainEndpoint);
              // TODO: Handle update
              const isDelete = event.RequestType === 'Delete';

              const doc = {
                type: "s3",
                settings: {
                  bucket: event.ResourceProperties.ESBackupBucket,
                  region: region,
                  role_arn: event.ResourceProperties.RoleArn,
                },
              };

              var creds = new AWS.EnvironmentCredentials('AWS');
              var req = new AWS.HttpRequest(endpoint);
              const now = new Date();

              req.method = isDelete ? 'DELETE' : 'POST';
              req.region = region;
              if (event.ResourceProperties.doSnap === true) {
                  req.path = `/_snapshot/${event.ResourceProperties.ESSnapshotRepo}/snap-${now.getFullYear()}.${("0" + (now.getMonth() + 1)).slice(-2)}.${("0" + (now.getDate())).slice(-2)}`;
              } else {
                  if (!isDelete) {
                      req.body = JSON.stringify(doc);
                  }
                  req.path = `/_snapshot/${event.ResourceProperties.ESSnapshotRepo}`;
              }
              req.headers['presigned-expires'] = false;
              req.headers.Host = endpoint.host;

              // Sign the request (Sigv4)
              var signer = new AWS.Signers.V4(req, 'es');
              signer.addAuthorization(creds, new Date());

              // Post document to ES
              var send = new AWS.NodeHttpClient();
              send.handleRequest(req, null, (httpResp) => {
                  // TODO: check httpResp.statusCode
                  var body = '';
                  httpResp.on('data', (chunk) => {
                      body += chunk;
                  });
                  httpResp.on('end', (chunk) => {
                      console.log('Response: ' + body);
                      if (event.LogicalResourceId) {
                          response.send(event, context, response.SUCCESS, {}, event.LogicalResourceId);
                      } else {
                          context.succeed();
                      }
                  });
              }, (err) => {
                  console.log('Error: ' + err);
                  if (event.LogicalResourceId) {
                      response.send(event, context, response.FAILED, {}, event.LogicalResourceId);
                  } else {
                      context.fail();
                  }
              });
          }
      Description: Lambda function for trigger ES snapshots
      FunctionName: !Sub "${AWS::StackName}-es-snapshots"
      Handler: index.handler
      Role: !GetAtt ElasticsearchAWSLogsSnapshotFunctionRole.Arn
      Runtime: nodejs6.10
      Timeout: 300
  CreateElasticsearchSnapshotRepo:
    Type: 'Custom::CreateESSnapshotRepo'
    Properties:
      Description: "Creeate Elasticsearch Snapshots"
      ServiceToken: !GetAtt 'ElasticsearchAWSLogsSnapshotFunction.Arn'
      doSnap: False
      ESBackupBucket: !Sub "${AWS::StackName}-es-snapshots"
      ESDomainEndpoint: !Sub "${ElasticsearchAWSLogs.DomainEndpoint}"
      RoleArn: !Sub "${ElasticsearchSnapshotRole.Arn}"
      ESSnapshotRepo: !Sub "${AWS::StackName}_repo"
  ScheduledRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: !Sub "${AWS::StackName}-es-snapshots"
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 day)"
      State: "ENABLED"
      Targets:
        # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-events-rule-target.html
        - Arn: !GetAtt "ElasticsearchAWSLogsSnapshotFunction.Arn"
          Id: "TargetFunctionV1"
          Input: !Sub >-
            {
              "ResourceProperties": {
                "doSnap": true,
                "ESDomainEndpoint": "${ElasticsearchAWSLogs.DomainEndpoint}",
                "ESSnapshotRepo": "${AWS::StackName}_repo"
              }
            }
